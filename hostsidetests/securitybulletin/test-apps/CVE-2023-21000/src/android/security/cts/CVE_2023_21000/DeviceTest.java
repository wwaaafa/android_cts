/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21000_test;

import static org.junit.Assert.assertNull;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;

import android.os.IBinder;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.util.Log;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    static final String TAG = "DeviceTest";
    static final int TRANSACTION_openContentUri = 1;

    private IBinder mBinder = null;
    private Parcel mParcel = null;
    private Parcel mReply = null;
    private ParcelFileDescriptor mFd = null;

    @Test
    public void testCVE_2023_21000() {
        try {
            mBinder = getService("activity");

            mParcel = Parcel.obtain();
            mParcel.writeInterfaceToken("android.app.IActivityManager");
            mParcel.writeString("content://test.content.provider/");

            mReply = Parcel.obtain();

            assumeNotNull(mBinder);
            assumeNotNull(mParcel);
            assumeNotNull(mReply);

            Log.i(TAG, "Initiating openContentUri");

            mBinder.transact(TRANSACTION_openContentUri, mParcel, mReply, 0);
            mReply.readException();
            mFd = mParcel.readFileDescriptor();
        } catch (Throwable th) {
            assumeNoException(th);
        }

        assertNull(mFd);
    }

    private IBinder getService(String name) throws Throwable {
        return (IBinder) Class.forName("android.os.ServiceManager")
                .getDeclaredMethod("getServiceOrThrow", String.class)
                .invoke(null, name);
    }
}
