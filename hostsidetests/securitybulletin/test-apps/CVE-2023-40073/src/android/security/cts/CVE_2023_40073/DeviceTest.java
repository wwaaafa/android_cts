/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40073;

import static android.Manifest.permission.CREATE_USERS;
import static android.app.Notification.EXTRA_MESSAGES;
import static android.app.Notification.MessagingStyle.Message.KEY_TEXT;
import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.app.Notification;
import android.app.Notification.MessagingStyle.Message;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Person;
import android.content.ContentProvider;
import android.content.Context;
import android.content.pm.UserInfo;
import android.graphics.drawable.Icon;
import android.os.Bundle;
import android.os.UserManager;
import android.service.notification.StatusBarNotification;
import android.util.Log;

import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.SystemUtil;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;
import java.util.Locale;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_40073() {
        try {
            final Instrumentation instrumentation = getInstrumentation();
            final Context context = instrumentation.getContext();
            final UserManager userManager = context.getSystemService(UserManager.class);

            // Check if the device supports multiple users or not
            assume().withMessage("This device does not support multiple users")
                    .that(userManager.supportsMultipleUsers())
                    .isTrue();

            // Get the user id of "cve_2023_40073_user"
            final int testUserId =
                    SystemUtil.runWithShellPermissionIdentity(
                            () -> {
                                List<UserInfo> list = userManager.getUsers();
                                for (UserInfo info : list) {
                                    if (info.toString().contains("cve_2023_40073_user")) {
                                        return info.getUserHandle().getIdentifier();
                                    }
                                }
                                return -1;
                            },
                            CREATE_USERS);
            assume().withMessage("Unable to find the user cve_2023_40073_user")
                    .that(testUserId != -1)
                    .isTrue();

            // Insert a placeholder content in the new user and query it to see if it has been
            // inserted successfully
            final String imagesContentUri = EXTERNAL_CONTENT_URI.toString();
            assume().withMessage("Failed to insert a placeholder content in the test user")
                    .that(
                            poll(
                                    () -> {
                                        try {
                                            SystemUtil.runShellCommand(
                                                    instrumentation,
                                                    String.format(
                                                            "content insert --user %d --uri %s"
                                                        + " --bind "
                                                        + "_display_name:s:cve_2023_40073.jpg",
                                                            testUserId, imagesContentUri));
                                            return SystemUtil.runShellCommand(
                                                            instrumentation,
                                                            String.format(
                                                                    "content query --user %d --uri"
                                                                            + " %s --projection"
                                                                            + " _display_name",
                                                                    testUserId, imagesContentUri))
                                                    .contains("cve_2023_40073.jpg");
                                        } catch (Exception e) {
                                            Log.i("CVE-2023-40073", "Got an exception: " + e);
                                        }
                                        return false;
                                    }))
                    .isTrue();

            // Create extras and pass message as a bundle as an argument
            Bundle extras = new Bundle();
            extras.putParcelableArray(
                    EXTRA_MESSAGES,
                    new Bundle[] {
                        new Message(
                                        KEY_TEXT,
                                        System.currentTimeMillis(),
                                        new Person.Builder()
                                                .setName("cve_2023_40073_person" /* person name */)
                                                .setIcon(
                                                        Icon.createWithContentUri(
                                                                ContentProvider.maybeAddUserId(
                                                                        EXTERNAL_CONTENT_URI,
                                                                        testUserId)))
                                                .setImportant(true)
                                                .build())
                                .setData("image/jpg" /* dataMimeType */, null)
                                .toBundle()
                    });

            // Create notification channel
            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);
            String notificationChannelId = "notificationChannelId";
            NotificationChannel notificationChannel =
                    new NotificationChannel(
                            notificationChannelId,
                            "notificationChannelName" /* notification channel name */,
                            NotificationManager.IMPORTANCE_HIGH);
            notificationManager.createNotificationChannel(notificationChannel);

            // Post notification
            try {
                notificationManager.notify(
                        0 /* notification id */,
                        new Notification.Builder(context, notificationChannelId)
                                .setExtras(extras)
                                .setCategory(Notification.CATEGORY_MESSAGE)
                                .setSmallIcon(
                                        Icon.createWithData(
                                                new byte[0] /* data */,
                                                0 /* offset */,
                                                0 /* length */))
                                .build());
            } catch (SecurityException securityException) {
                if (securityException
                        .getLocalizedMessage()
                        .toLowerCase(Locale.getDefault())
                        .contains(imagesContentUri)) {
                    // SecurityException is expected with fix and hence exit the test
                    return;
                } else {
                    throw securityException;
                }
            }

            // Check if notification gets posted or not, fail the test if notification gets posted
            assertWithMessage(
                            "Device is vulnerable to b/287640400 hence images belonging to another"
                                    + " user on the same device can be displayed in conversation"
                                    + " notifications")
                    .that(
                            poll(
                                    () -> {
                                        StatusBarNotification[] activeNotifications =
                                                notificationManager.getActiveNotifications();
                                        for (StatusBarNotification notification :
                                                activeNotifications) {
                                            if (notification
                                                    .getPackageName()
                                                    .equals(context.getPackageName())) {
                                                return true;
                                            }
                                        }
                                        return false;
                                    }))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
