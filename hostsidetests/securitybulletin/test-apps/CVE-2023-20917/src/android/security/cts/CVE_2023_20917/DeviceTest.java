/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_20917;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.UserInfo;
import android.net.Uri;
import android.os.UserHandle;
import android.os.UserManager;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.UiScrollable;
import androidx.test.uiautomator.UiSelector;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_20917() {
        UiAutomation uiAutomation = null;
        try {
            final int waitMS = 5000;
            Instrumentation instrumentation = getInstrumentation();
            UiDevice device = UiDevice.getInstance(instrumentation);
            Context context = instrumentation.getTargetContext();
            uiAutomation = instrumentation.getUiAutomation();
            Semaphore broadcastReceived = new Semaphore(0);

            // Register a broadcast receiver to receive broadcast from PocActivity indicating
            // presence of vulnerability
            BroadcastReceiver broadcastReceiver =
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                if (intent.getAction()
                                        .equals(context.getString(R.string.broadcastAction))) {
                                    broadcastReceived.release();
                                }
                            } catch (Exception ignored) {
                                // ignore any exceptions
                            }
                        }
                    };

            UserHandle workUserHandle = null;
            uiAutomation.adoptShellPermissionIdentity();
            final List<UserInfo> list = context.getSystemService(UserManager.class).getUsers();
            for (UserInfo info : list) {
                if (info.toString().contains(context.getString(R.string.workProfileName))) {
                    workUserHandle = info.getUserHandle();
                    break;
                }
            }
            assumeTrue(workUserHandle != null);

            context.startActivityAsUser(
                    new Intent(context, WorkProfileActivity.class)
                            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK),
                    workUserHandle);

            context.registerReceiver(
                    broadcastReceiver,
                    new IntentFilter(context.getString(R.string.broadcastAction)));

            final Intent intent = new Intent(Intent.ACTION_SEND);
            intent.setData(Uri.parse(context.getString(R.string.contentUri)));
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            Intent chooserIntent =
                    Intent.createChooser(intent, context.getString(R.string.chooserMessage));
            chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(chooserIntent);

            Pattern workPattern =
                    Pattern.compile(
                            context.getString(R.string.workString), Pattern.CASE_INSENSITIVE);
            assumeTrue(device.wait(Until.hasObject(By.text(workPattern)), waitMS));
            UiObject2 workProfile = device.findObject(By.text(workPattern));
            workProfile.click();
            assumeTrue(workProfile.isSelected());

            UiScrollable uiScrollable =
                    new UiScrollable(
                            new UiSelector()
                                    .resourceId(context.getString(R.string.contentPanelId)));
            uiScrollable.setAsVerticalList();
            uiScrollable.scrollForward();
            uiScrollable.scrollTextIntoView(context.getString(R.string.cveId));

            // In the chooser activity UI, we need to select the 'CVE_2023_20917' App
            // and not the individual activity that we have defined. Therefore, selecting
            // the last instance
            assumeTrue(
                    device.wait(
                            Until.hasObject(By.text(context.getString(R.string.cveId))), waitMS));
            List<UiObject2> objects =
                    device.findObjects(By.text(context.getString(R.string.cveId)));
            objects.get(objects.size() - 1).click();

            // Whichever activity is at the bottom of the stack will suffer from the bug.
            // Therefore, we are selecting the last instance in the stack.
            assumeTrue(
                    device.wait(
                            Until.hasObject(By.text(context.getString(R.string.cveId))), waitMS));
            List<UiObject2> objectsList =
                    device.findObjects(By.text(context.getString(R.string.cveId)));
            objectsList.get(objectsList.size() - 1).click();

            assertFalse(
                    context.getString(R.string.testFailMessage),
                    broadcastReceived.tryAcquire(waitMS, TimeUnit.MILLISECONDS));
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                uiAutomation.dropShellPermissionIdentity();
            } catch (Exception ignored) {
                // ignore any exceptions
            }
        }
    }
}
