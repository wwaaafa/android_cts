/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_45782;

import static android.Manifest.permission.INTERACT_ACROSS_USERS;
import static android.Manifest.permission.WRITE_DREAM_STATE;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.DreamManager;
import android.app.Instrumentation;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.UserHandle;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private UiDevice mUiDevice;
    private String mSettingsPackageName;

    @Test
    public void testPocCVE_2023_45782() {
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();
            mUiDevice = UiDevice.getInstance(instrumentation);
            final String packageName = context.getPackageName();

            // Set PocService as the current DreamService and get settings package name.
            runWithShellPermissionIdentity(
                    () -> {
                        DreamManager dreamManager = new DreamManager(context);
                        dreamManager.setActiveDream(
                                new ComponentName(packageName, packageName + ".PocService"));

                        // Retrieve settings package name
                        mSettingsPackageName = "com.android.settings";
                        ResolveInfo info =
                                context.getPackageManager()
                                        .resolveActivityAsUser(
                                                new Intent(Settings.ACTION_SETTINGS),
                                                PackageManager.MATCH_SYSTEM_ONLY,
                                                UserHandle.USER_SYSTEM);
                        if (info != null && info.activityInfo != null) {
                            mSettingsPackageName = info.activityInfo.packageName;
                        }
                    },
                    WRITE_DREAM_STATE,
                    INTERACT_ACROSS_USERS);

            // Launch screen saver settings
            context.startActivity(
                    new Intent(Settings.ACTION_DREAM_SETTINGS)
                            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

            // Launch PocService settings activity ie. PlatLogoActivity. On android T and above,
            // clicking 'Customize' button launches 'PlatLogoActivity'. On versions below T,
            // clicking gear icon launches 'PlatLogoActivity'.
            BySelector customizeButtonSelector = By.res(mSettingsPackageName, "customize_button");
            if (mUiDevice.wait(Until.hasObject(customizeButtonSelector), 3000 /* timeout */)) {
                mUiDevice.findObject(customizeButtonSelector).click();
            } else {

                // Search for settings_button to start PlatLogoActivity
                BySelector appLabelSelector =
                        By.text(
                                Pattern.compile(
                                        "!_CVE_2023_45782_label", Pattern.CASE_INSENSITIVE));
                if (mUiDevice.wait(Until.hasObject(appLabelSelector), 3000 /* timeout */)) {
                    UiObject2 commonParent = mUiDevice.findObject(appLabelSelector).getParent();

                    while (commonParent != null) {
                        UiObject2 gearIcon =
                                commonParent.findObject(
                                        By.res(mSettingsPackageName, "settings_button"));
                        if (gearIcon != null) {
                            gearIcon.click();
                            break;
                        }
                        commonParent = commonParent.getParent();
                    }
                }
            }

            // Check if PlatLogoActivity is launched
            Pattern resumedTruePattern =
                    Pattern.compile(".*mResumed=true.*", Pattern.CASE_INSENSITIVE);

            assertWithMessage(
                            "Device is vulnerable to b/300090204, Arbitrary activities can be"
                                    + " launched via screen saver settings")
                    .that(
                            poll(
                                    () -> {
                                        try {
                                            return resumedTruePattern
                                                    .matcher(
                                                            mUiDevice.executeShellCommand(
                                                                    "dumpsys activity"
                                                                            + " PlatLogoActivity"))
                                                    .find();
                                        } catch (Exception e) {
                                            return false;
                                        }
                                    }))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        } finally {
            try {
                mUiDevice.pressHome();
            } catch (Exception e) {
                // Ignore exceptions as the test has finished
            }
        }
    }
}
