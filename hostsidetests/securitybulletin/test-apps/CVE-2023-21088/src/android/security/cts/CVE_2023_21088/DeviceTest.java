/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21088;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_21088() {
        try {
            final int timeoutMs = 5000;
            final Semaphore targetReturn = new Semaphore(0);
            Context context = getApplicationContext();
            CompletableFuture<String> broadcastReceived = new CompletableFuture<String>();
            BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    try {
                        if (intent.getBooleanExtra(context.getString(R.string.isVulnerable),
                                false)) {
                            targetReturn.release();
                        }
                        String pocActivityStatus =
                                intent.getStringExtra(context.getString(R.string.status));
                        if (pocActivityStatus != null) {
                            broadcastReceived.complete(pocActivityStatus);
                        }
                    } catch (Exception ignored) {
                        // ignore any exceptions
                    }
                }
            };
            IntentFilter filter = new IntentFilter();
            filter.addAction(context.getString(R.string.bcastAction));
            context.registerReceiver(broadcastReceiver, filter);

            // Start PocActivity
            Intent intent = new Intent(context, PocActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);
            String pocActivityStatus = broadcastReceived.get(timeoutMs, TimeUnit.MILLISECONDS);
            assumeTrue(context.getString(R.string.pocCrashedMsg) + pocActivityStatus,
                    pocActivityStatus.equals(context.getString(R.string.noExceptionMsg)));

            // Wait on call from TargetActivity. On vulnerable device, TargetActivity will
            // launch and the test fail, with fix TargetActivity will not launch.
            assertFalse(context.getString(R.string.msgFailure),
                    targetReturn.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS));
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
