/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21254_test;

import static android.Manifest.permission.DUMP;
import static android.Manifest.permission.RECORD_AUDIO;
import static android.app.ApplicationExitInfo.REASON_USER_REQUESTED;
import static android.content.pm.PackageManager.PERMISSION_DENIED;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.sts.common.SystemUtil.DEFAULT_MAX_POLL_TIME_MS;
import static com.android.sts.common.SystemUtil.DEFAULT_POLL_TIME_MS;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import static java.lang.String.format;

import android.app.ActivityManager;
import android.app.ApplicationExitInfo;
import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.util.Log;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;
import java.util.function.BooleanSupplier;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_21254() {
        try {
            final Instrumentation instrumentation = getInstrumentation();
            final Context context = instrumentation.getContext();
            final UiAutomation uiAutomation = instrumentation.getUiAutomation();
            final String helperAppPkg = "android.security.cts.CVE_2023_21254_helper";

            BooleanSupplier permissionCheck =
                    new BooleanSupplier() {
                        @Override
                        public boolean getAsBoolean() {
                            PackageManager pm = context.getPackageManager();
                            return pm.checkPermission(RECORD_AUDIO, helperAppPkg)
                                    == PERMISSION_DENIED;
                        }
                    };

            // Create intent to launch PocActivity
            final String targetActivity = "android.security.cts.CVE_2023_21254_helper.PocActivity";
            Intent intent =
                    new Intent()
                            .setClassName(helperAppPkg, targetActivity)
                            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

            // Create BySelector for the allow once button
            final UiDevice uiDevice = UiDevice.getInstance(instrumentation);
            final long uiTimeoutMs = 2_000L;
            BySelector selector =
                    By.res(createCaseInsensitivePattern(".*permission_allow_one_time_button.*"))
                            .pkg(createCaseInsensitivePattern(".*permissioncontroller.*"));

            // Run the exploit multiple times to avoid false positives observed due to device taking
            // more than 60 secs in some runs to revoke the one time permission once the app is
            // killed. This behaviour was not observed in consecutive runs.
            int tries = 5;
            while (tries-- > 0) {

                // Revoke RECORD_AUDIO permission for helperAppPkg
                uiAutomation.revokeRuntimePermission(helperAppPkg, RECORD_AUDIO, context.getUser());

                // Wait until RECORD_AUDIO permission is revoked for helperAppPkg
                assume().withMessage(
                                format(
                                        "%s permission is not revoked for %s package hence"
                                                + " skipping",
                                        RECORD_AUDIO, helperAppPkg))
                        .that(
                                poll(
                                        permissionCheck,
                                        DEFAULT_POLL_TIME_MS,
                                        DEFAULT_MAX_POLL_TIME_MS / 2))
                        .isTrue();

                // Start targetActivity from helper app which will request for one-time permission
                context.startActivity(intent);

                // Grant one-time permission to helperAppPkg. This has dependence on UI since
                // permission required to grant one-time permission
                // MANAGE_ONE_TIME_PERMISSION_SESSIONS cannot be granted to test-app or used via
                // adoptShellPermissionIdentity
                assume().withMessage("UI element for allowing one-time permission not found")
                        .that(uiDevice.wait(Until.hasObject(selector), uiTimeoutMs))
                        .isTrue();
                uiDevice.findObject(selector).click();
                // If in case GrantPermissionsActivity is launched twice due to race condition,
                // click UI element again to grant one-time permission
                if (!uiDevice.wait(Until.gone(selector), uiTimeoutMs)) {
                    uiDevice.findObject(selector).click();
                }

                // Wait until helperAppPkg app process is terminated
                runWithShellPermissionIdentity(
                        () -> {
                            assume().withMessage(
                                            format(
                                                    "%s app process not terminated and hence"
                                                            + " skipping",
                                                    helperAppPkg))
                                    .that(
                                            poll(
                                                    () -> {
                                                        // Pass pid and maxNum as 0 to
                                                        // getHistoricalProcessExitReasons() in
                                                        // order to get
                                                        // all matching records for helperAppPkg.
                                                        final List<ApplicationExitInfo> infos =
                                                                context.getSystemService(
                                                                                ActivityManager
                                                                                        .class)
                                                                        .getHistoricalProcessExitReasons(
                                                                                helperAppPkg,
                                                                                0 /* pid */,
                                                                                0 /* maxNum */);
                                                        // Check latest reason for app exit
                                                        assume().that(infos).isNotNull();
                                                        return infos.get(0).getStatus()
                                                                == REASON_USER_REQUESTED;
                                                    }))
                                    .isTrue();
                        },
                        DUMP);
                if (poll(permissionCheck, DEFAULT_POLL_TIME_MS, DEFAULT_MAX_POLL_TIME_MS / 2)) {
                    return;
                }
                Log.e(
                        "testPocCVE_2023_21254",
                        String.format("Exploit run number %s completed", 5 - tries));
            }

            // Without fix, one-time permission for helperAppPkg is not revoked after app process
            // terminates and hence test fails
            assertWithMessage(
                            "Device is vulnerable to b/254736794!! One-time permissions can be held"
                                    + " indefinitely due to activity manager bug")
                    .fail();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private Pattern createCaseInsensitivePattern(String pattern) {
        return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
    }
}
