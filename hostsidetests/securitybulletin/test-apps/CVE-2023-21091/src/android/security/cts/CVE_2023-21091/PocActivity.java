/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21091;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.ComponentName;
import android.content.Intent;
import android.net.Uri;
import android.provider.Settings;

import java.util.List;

// The PoC depends on getAppTasks() to detect the vulnerability which requires to be called from
// within an activity, hence PocActivity has been used.
public class PocActivity extends Activity {

    @Override
    protected void onResume() {
        try {
            super.onResume();

            // Launching locale settings
            Intent intent = new Intent(Settings.ACTION_APP_LOCALE_SETTINGS)
                    .setData(Uri.fromParts(getString(R.string.uriScheme),
                            getSettingsPkgName(), null));
            startActivity(intent);

            // Waiting for locale settings to get launch.
            final int sleepTime = 1000;
            int waitForTimeOut = 5;
            boolean settingsWindowAppeared = false;
            while ((waitForTimeOut--) != 0 && !settingsWindowAppeared) {
                List<ActivityManager.AppTask> appTask =
                        getSystemService(ActivityManager.class).getAppTasks();
                for (ActivityManager.AppTask af : appTask) {
                    if (af.getTaskInfo()
                            .topActivity
                            .getClassName()
                            .toString()
                            .contains(intent.resolveActivity(getPackageManager())
                                    .getClassName())) {
                        settingsWindowAppeared = true;
                        break;
                    }
                }
                Thread.sleep(sleepTime);
            }

            Intent broadcastIntent = new Intent(getString(R.string.broadcastAction));
            broadcastIntent.putExtra(getString(R.string.isFixPresent), !settingsWindowAppeared);
            sendBroadcast(broadcastIntent);
        } catch (Exception e) {
            // Any exception here, would cause assumption failure in DeviceTest. Hence, it is not
            // required to send broadcast to the DeviceTest.
        }
    }

    // Retrieve Settings package name dynamically
    private String getSettingsPkgName() {
        Intent settingsIntent = new Intent(Settings.ACTION_SETTINGS);
        ComponentName settingsComponent =
                settingsIntent.resolveActivity(getPackageManager());
        return settingsComponent != null ? settingsComponent.getPackageName()
                : getString(R.string.defaultSettingsPkg);
    }
}
