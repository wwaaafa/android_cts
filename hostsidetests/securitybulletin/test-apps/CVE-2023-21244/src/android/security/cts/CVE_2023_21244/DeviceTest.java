/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21244;

import static android.app.NotificationManager.IMPORTANCE_DEFAULT;
import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.SystemUtil.poll;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.RemoteInputHistoryItem;
import android.content.ContentProvider;
import android.content.Context;
import android.content.pm.UserInfo;
import android.graphics.drawable.Icon;
import android.os.UserManager;
import android.service.notification.StatusBarNotification;
import android.util.Log;

import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.SystemUtil;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.util.List;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private static final String TAG = "CVE-2023-21244";

    @Test
    public void testCVE_2023_21244() {
        try {
            // Get the user id of "cve_2023_21244_user" created in testPocCVE_2023_21244()
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();
            int testUserId =
                    SystemUtil.runWithShellPermissionIdentity(
                            () -> {
                                UserManager userManager =
                                        context.getSystemService(UserManager.class);
                                List<UserInfo> users = userManager.getUsers();
                                int userId = -1;
                                for (UserInfo user : users) {
                                    if (user.name.equals("cve_2023_21244_user")) {
                                        userId = user.id;
                                        break;
                                    }
                                }
                                return userId;
                            },
                            android.Manifest.permission.CREATE_USERS);
            assumeTrue("Unable to find the user cve_2023_21244_user", testUserId != -1);

            // Insert a placeholder content in the new user and query it to see if it has been
            // inserted successfully
            final String imagesContentUri = EXTERNAL_CONTENT_URI.toString();
            assumeTrue(
                    "Failed to insert a placeholder content in the test user",
                    poll(
                            () -> {
                                try {
                                    SystemUtil.runShellCommand(
                                            instrumentation,
                                            String.format(
                                                    "content insert --user %d --uri %s --bind "
                                                            + "_display_name:s:cve_2023_21244.jpg",
                                                    testUserId, imagesContentUri));
                                    return SystemUtil.runShellCommand(
                                                    instrumentation,
                                                    String.format(
                                                            "content query " + "--user %d --uri %s",
                                                            testUserId, imagesContentUri))
                                            .contains("Row");
                                } catch (IOException e) {
                                    Log.i(TAG, "Got an exception: " + e);
                                }
                                return false;
                            }));

            // Prepare the notification builder with the remote input history containing the
            // secondary user's image
            final String channelId = "CVE_2023_20913_channel";
            Notification.Builder builder =
                    new Notification.Builder(context, channelId)
                            .setChannelId(channelId)
                            .setSmallIcon(
                                    Icon.createWithData(
                                            new byte[0] /* data */,
                                            0 /* offset */,
                                            0 /* length */));
            RemoteInputHistoryItem remoteInputHistoryItems[] = {
                new RemoteInputHistoryItem(
                        "image/*" /* mime type */,
                        ContentProvider.maybeAddUserId(EXTERNAL_CONTENT_URI, testUserId),
                        "cve_2023_21244_text" /* backup text */)
            };
            builder.setRemoteInputHistory(remoteInputHistoryItems);

            // Send the notification
            final int notificationId = 1;
            NotificationManager nmgr = context.getSystemService(NotificationManager.class);
            nmgr.createNotificationChannel(
                    new NotificationChannel(channelId, channelId, IMPORTANCE_DEFAULT));
            try {
                nmgr.notify(notificationId, builder.build());
            } catch (SecurityException securityException) {
                if (securityException
                        .getLocalizedMessage()
                        .toLowerCase()
                        .contains(imagesContentUri)) {
                    // Ignore as this is expected with fix and the test should pass so exit the test
                    return;
                } else {
                    throw securityException;
                }
            }

            // Check if notification gets posted or not. On a vulnerable device, the notification
            // containing other users' image will get posted, hence fail the test else the test will
            // pass.
            assertFalse(
                    "Device is vulnerable to b/276729064 hence images belonging to another user on"
                            + " the same device can be displayed in notification by setting it as"
                            + " a part of remote input history",
                    poll(
                            () -> {
                                StatusBarNotification[] activeNotifications =
                                        nmgr.getActiveNotifications();
                                for (StatusBarNotification notification : activeNotifications) {
                                    if (notification.getId() == notificationId
                                            && notification
                                                    .getPackageName()
                                                    .equals(context.getPackageName())) {
                                        return true;
                                    }
                                }
                                return false;
                            }));
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
