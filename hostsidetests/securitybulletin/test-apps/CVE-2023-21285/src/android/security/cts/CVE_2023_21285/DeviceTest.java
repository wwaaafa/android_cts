/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21285;

import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.SystemUtil.poll;

import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.content.ContentProvider;
import android.content.Context;
import android.content.pm.UserInfo;
import android.media.MediaMetadata;
import android.media.session.MediaController;
import android.media.session.MediaSession;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.UserManager;
import android.util.Log;

import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.SystemUtil;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_21285() {
        try {
            // Get the user id of "cve_2023_21285_user" created in testPocCVE_2023_21285()
            Instrumentation instrumentation = getInstrumentation();
            Context context = getInstrumentation().getContext();
            int testUserId =
                    SystemUtil.runWithShellPermissionIdentity(
                            () -> {
                                UserManager userManager =
                                        context.getSystemService(UserManager.class);
                                List<UserInfo> users = userManager.getUsers();
                                int userId = -1;
                                for (UserInfo user : users) {
                                    if (user.name.equals("cve_2023_21285_user")) {
                                        userId = user.id;
                                        break;
                                    }
                                }
                                return userId;
                            },
                            android.Manifest.permission.CREATE_USERS);
            assumeTrue("Unable to find the user cve_2023_21285_user", testUserId != -1);

            // Insert a placeholder content in the new user and query it to see if it has been
            // inserted successfully
            final String imagesContentUri = EXTERNAL_CONTENT_URI.toString();
            assumeTrue(
                    "Failed to insert a placeholder content in the test user",
                    poll(
                            () -> {
                                try {
                                    SystemUtil.runShellCommand(
                                            instrumentation,
                                            String.format(
                                                    "content insert --user %d --uri %s --bind "
                                                            + "_display_name:s:cve_2023_21285.jpg",
                                                    testUserId, imagesContentUri));
                                    return SystemUtil.runShellCommand(
                                                    instrumentation,
                                                    String.format(
                                                            "content query " + "--user %d --uri %s",
                                                            testUserId, imagesContentUri))
                                            .contains("Row");
                                } catch (IOException e) {
                                    Log.i("CVE-2023-21285", "Got an exception: " + e);
                                }
                                return false;
                            }));

            // Create a MediaSession
            MediaSession session = new MediaSession(context, "cve_2023_21285_session");

            // Create a separate handler thread
            final HandlerThread handlerThread = new HandlerThread("cve_2023_21285_handlerThread");
            handlerThread.start();

            // Fetch uri from onMetadataChanged()
            CompletableFuture<Boolean> uriReceived = new CompletableFuture<Boolean>();
            session.getController()
                    .registerCallback(
                            new MediaController.Callback() {
                                @Override
                                public void onMetadataChanged(MediaMetadata metadata) {
                                    uriReceived.complete(
                                            metadata.getString(MediaMetadata.METADATA_KEY_ART_URI)
                                                    == null);
                                }
                            },
                            new Handler(handlerThread.getLooper()));

            // Create MediaMetadata with 'uri' of cve_2023_21285_user and set metadata for 'session'
            session.setMetadata(
                    new MediaMetadata.Builder()
                            .putString(
                                    MediaMetadata.METADATA_KEY_ART_URI,
                                    ContentProvider.maybeAddUserId(EXTERNAL_CONTENT_URI, testUserId)
                                            .toString())
                            .build());

            // Fail the test if uri stored in 'METADATA_KEY_ART_URI' in mediaMetadata is not null
            assertTrue(
                    "Device is vulnerable to b/271851153, hence images"
                            + " belonging to another user on the same device"
                            + " can be displayed in MediaStyle notifications",
                    uriReceived.get(5_000L /* timeout */, TimeUnit.MILLISECONDS));
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
