/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_35669_test;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private String mPocActivityStatus;
    public static int sTaskId;
    public static final int TIMEOUT_MS = 5000;

    @Test
    public void testCVE_2023_35669() {
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();
            runWithShellPermissionIdentity(
                    () -> {
                        // Registering a receiver here to wait for broadcast
                        final Semaphore targetReturn = new Semaphore(0);
                        final Semaphore hijackReturn = new Semaphore(0);
                        final Semaphore pocReturn = new Semaphore(0);
                        BroadcastReceiver broadcastReceiver =
                                new BroadcastReceiver() {
                                    @Override
                                    public void onReceive(Context context, Intent intent) {
                                        try {
                                            // Wait for TargetActivity to get launched
                                            if (intent.getBooleanExtra(
                                                    context.getString(R.string.actionTarget),
                                                    false)) {
                                                // Fetch taskId
                                                sTaskId =
                                                        intent.getIntExtra(
                                                                context.getString(R.string.taskId),
                                                                -1);
                                                if (sTaskId != -1) {
                                                    targetReturn.release();
                                                }
                                            }

                                            // Wait for HijackActivity to get launched
                                            if (intent.getBooleanExtra(
                                                    context.getString(R.string.isVulnerable),
                                                    false)) {
                                                hijackReturn.release();
                                            }

                                            // Wait for PocActivity to get launched
                                            mPocActivityStatus =
                                                    intent.getStringExtra(
                                                            context.getString(
                                                                    R.string.pocActivityStatus));
                                            if (mPocActivityStatus != null) {
                                                pocReturn.release();
                                            }
                                        } catch (Exception ignored) {
                                            // ignore any exceptions
                                        }
                                    }
                                };
                        IntentFilter filter =
                                new IntentFilter(context.getString(R.string.bcastActionTarget));
                        context.registerReceiver(broadcastReceiver, filter);

                        // Start TargetActivity
                        context.startActivity(
                                new Intent(Intent.ACTION_MAIN)
                                        .setClassName(
                                                context.getString(R.string.pkgTarget),
                                                context.getString(R.string.activityTarget))
                                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
                        assumeTrue(
                                context.getString(R.string.targetFailMsg),
                                targetReturn.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS));

                        // Start PocActivity
                        context.startActivity(
                                new Intent(context, PocActivity.class)
                                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
                        assumeTrue(
                                context.getString(R.string.pocFailedMsg),
                                pocReturn.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS));
                        assumeTrue(
                                context.getString(R.string.pocCrashedMsg, mPocActivityStatus),
                                mPocActivityStatus.equals(
                                        context.getString(R.string.noExceptionMsg)));

                        // Wait for account name to appear on display and then click
                        UiDevice uiDevice = UiDevice.getInstance(instrumentation);
                        clickObject(context, uiDevice, context.getString(R.string.accountName));

                        // Click on 'Remove Account' button
                        clickObject(context, uiDevice, context.getString(R.string.removeAccount));

                        // Click on 'Remove Account' popup to confirm account removal
                        clickObject(context, uiDevice, context.getString(R.string.removeAccount));

                        // On vulnerable device, HijackActivity will be launched and the test fails
                        assertFalse(
                                context.getString(R.string.msgFailure),
                                hijackReturn.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS));
                    });
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    public void clickObject(Context context, UiDevice uiDevice, String objectName) {
        Pattern activityPattern = Pattern.compile(objectName, Pattern.CASE_INSENSITIVE);
        BySelector removeAccountSelector = By.text(activityPattern);
        UiObject2 uiObject = uiDevice.wait(Until.findObject(removeAccountSelector), TIMEOUT_MS);
        assumeNotNull(context.getString(R.string.objectNotFound, objectName), uiObject);
        uiObject.click();
    }
}
