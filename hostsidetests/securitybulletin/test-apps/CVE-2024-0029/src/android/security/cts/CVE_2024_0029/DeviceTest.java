/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_0029;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.os.UserManager;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_0029() {
        try {
            // Check if the device supports multiple users or not
            final Context context = getApplicationContext();
            assume().withMessage("This device does not support multiple users")
                    .that(context.getSystemService(UserManager.class).supportsMultipleUsers())
                    .isTrue();

            // Check if 'PocAdminReceiver' was successfully set as profile-owner
            final DevicePolicyManager devicePolicyManager =
                    context.getSystemService(DevicePolicyManager.class);
            assume().withMessage("PocAdminReceiver was not set as profile-owner")
                    .that(devicePolicyManager.isProfileOwnerApp(context.getPackageName()))
                    .isTrue();

            // Without fix, 'DevicePolicyManager' keeps single track of 'screen capture'
            // state for the device. Due to which, the 'DevicePolicyManager' sets the
            // 'screen capture' policy for the primary user, overriding the previously set
            // 'screen capture' policy for the managed user.
            final ComponentName componentName =
                    new ComponentName(context.getPackageName(), PocAdminReceiver.class.getName());
            assertWithMessage("Device is vulnerable to b/305664128 !!")
                    .that(devicePolicyManager.getScreenCaptureDisabled(componentName))
                    .isTrue();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
