/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_45792;

import static android.app.PendingIntent.readPendingIntentOrNullFromParcel;

import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.PendingIntent;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Parcel;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private IBinder mToken = null;
    private boolean mSendMethodCalled = false;

    private final IIntentSender.Stub mSender =
            new IIntentSender.Stub() {
                @Override
                public void send(
                        int code,
                        Intent intent,
                        String resolvedType,
                        IBinder allowlistToken,
                        IIntentReceiver finishedReceiver,
                        String requiredPermission,
                        Bundle options) {
                    // With Fix, IBinder 'allowlistToken' will be passed as null
                    mToken = allowlistToken;
                    mSendMethodCalled = true;
                }
            };

    @Test
    public void testPocCVE_2023_45792() {
        try {
            final Parcel data = Parcel.obtain();
            final IBinder binder = mSender.asBinder();
            data.writeStrongBinder(binder);
            data.setClassCookie(PendingIntent.class, binder);
            data.setDataPosition(0);

            readPendingIntentOrNullFromParcel(data).send();

            poll(() -> (mSendMethodCalled));
            assertWithMessage(
                            "Device is vulnerable to b/279428283 !!"
                                    + " Background/Foreground service restrictions can be"
                                    + " bypassed via set app-owned IIntentSender")
                    .that(mToken)
                    .isNull();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
