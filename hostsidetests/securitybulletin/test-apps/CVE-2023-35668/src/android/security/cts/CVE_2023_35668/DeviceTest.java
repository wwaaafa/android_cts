/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_35668;

import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.UiAutomation;
import android.content.ContentProvider;
import android.content.Context;
import android.content.Intent;
import android.content.pm.UserInfo;
import android.graphics.drawable.Icon;
import android.os.UserManager;
import android.service.notification.StatusBarNotification;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private int mTestUserId = -1;

    @Test
    public void testWearableExtenderUri() {
        try {
            final Instrumentation instrumentation = getInstrumentation();
            final Context context = instrumentation.getContext();
            final UiAutomation uiAutomation = instrumentation.getUiAutomation();
            final UserManager userManager = context.getSystemService(UserManager.class);

            // Check if the device supports multiple users or not
            assume().withMessage("This device does not support multiple users")
                    .that(userManager.supportsMultipleUsers())
                    .isTrue();

            runWithShellPermissionIdentity(
                    () -> {
                        final List<UserInfo> list = userManager.getUsers();
                        for (UserInfo info : list) {
                            if (info.name.contains("cve_2023_35668_user")) {
                                mTestUserId = info.id;
                                break;
                            }
                        }
                    },
                    android.Manifest.permission.CREATE_USERS);
            assume().withMessage("Unable to find the user cve_2023_35668_user")
                    .that(mTestUserId != -1)
                    .isTrue();

            // Set notification channel id
            String notificationChannelId = "notification_channel_id";

            // Create icon from uri of other user
            Icon wearActionIcon =
                    Icon.createWithContentUri(
                            ContentProvider.maybeAddUserId(EXTERNAL_CONTENT_URI, mTestUserId));

            // Create notification
            PendingIntent pendingIntent =
                    PendingIntent.getActivity(
                            context, 0, new Intent(), PendingIntent.FLAG_IMMUTABLE);
            Notification callNotification =
                    new Notification.Builder(context, notificationChannelId)
                            .setSmallIcon(
                                    Icon.createWithData(
                                            new byte[0] /* data */, 0 /* offset */, 0 /* length */))
                            .extend(
                                    new Notification.WearableExtender()
                                            .addAction(
                                                    new Notification.Action.Builder(
                                                                    wearActionIcon,
                                                                    "Wear!",
                                                                    pendingIntent)
                                                            .build()))
                            .build();

            // Create a notification channel
            NotificationChannel notificationChannel =
                    new NotificationChannel(
                            notificationChannelId,
                            "cve_2023_35668_notification_channel" /* notification channel name */,
                            NotificationManager.IMPORTANCE_HIGH);

            // Post the notification
            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);
            notificationManager.createNotificationChannel(notificationChannel);

            // Check if any security exception is caught
            int notificationId = 0;
            try {
                notificationManager.notify(notificationId, callNotification);
            } catch (SecurityException securityException) {
                if (securityException
                        .getLocalizedMessage()
                        .toLowerCase()
                        .contains(EXTERNAL_CONTENT_URI.toString())) {
                    // Ignore exception thrown with fix and exit the test
                    return;
                } else {
                    throw securityException;
                }
            }

            // Check if notification gets posted or not, fail the test if notification gets posted
            assertWithMessage(
                            "Device is vulnerable to b/283962802 hence images from URIs that are"
                                    + " not allowed can be displayed in wearable extender"
                                    + " notifications icon")
                    .that(
                            poll(
                                    () -> {
                                        StatusBarNotification[] activeNotifications =
                                                notificationManager.getActiveNotifications();
                                        for (StatusBarNotification notification :
                                                activeNotifications) {
                                            if (notification
                                                            .getPackageName()
                                                            .equals(context.getPackageName())
                                                    && notification.getId() == notificationId) {
                                                return true;
                                            }
                                        }
                                        return false;
                                    }))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
