/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_0017;

import static android.provider.MediaStore.ACTION_VIDEO_CAPTURE;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ResolveInfo;
import android.os.Looper;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.List;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_0017() {
        try {
            // Get resolveinfo for the activities with ACTION_VIDEO_CAPTURE
            final String targetActivityIntent = ACTION_VIDEO_CAPTURE;
            final Intent videoCaptureIntent = new Intent(targetActivityIntent);
            final Context context = getApplicationContext();
            final List<ResolveInfo> resolveInfos =
                    context.getPackageManager()
                            .queryIntentActivities(videoCaptureIntent, 0 /* flag */);
            assume().withMessage("No Activity found for " + targetActivityIntent)
                    .that(resolveInfos)
                    .isNotEmpty();

            Class CameraActivityClass = null;
            for (ResolveInfo resolveInfo : resolveInfos) {
                try {
                    // Get the context of package
                    final String cameraPkg =
                            resolveInfo.getComponentInfo().getComponentName().getPackageName();
                    Context cameraContext =
                            context.createPackageContext(
                                    cameraPkg,
                                    Context.CONTEXT_IGNORE_SECURITY | Context.CONTEXT_INCLUDE_CODE);

                    // Fetch the class 'CameraActivity'
                    CameraActivityClass =
                            cameraContext
                                    .getClassLoader()
                                    .loadClass("com.android.camera.CameraActivity");
                    break;
                } catch (ClassNotFoundException ignore) {
                    CameraActivityClass = null;
                }
            }
            assume().withMessage("No Class found for CameraActivity")
                    .that(CameraActivityClass)
                    .isNotNull();

            // Fetch the constructors of 'CameraActivity'
            Constructor CameraActivityConstructor = CameraActivityClass.getConstructor();

            // The CameraActivity constructor calls Handler::Handler() internally which requires
            // Looper.prepare() to be called
            Looper.prepare();

            // Create the object of 'CameraActivity' class
            CameraActivityConstructor.setAccessible(true);
            Activity cameraActivity = (Activity) CameraActivityConstructor.newInstance();

            // Setting the calling intent as capture intent as with fix, 'shouldUseNoOpLocation()'
            // returns true if it is a capture intent.
            cameraActivity.setIntent(videoCaptureIntent);
            Method shouldUseNoOpLocationMethod =
                    CameraActivityClass.getDeclaredMethod("shouldUseNoOpLocation");
            shouldUseNoOpLocationMethod.setAccessible(true);

            // Without Fix, 'shouldUseNoOpLocation()' returns false as calling package is null and
            // With fix, 'shouldUseNoOpLocation()' returns true if the calling intent is a capture
            // intent.
            assertWithMessage(
                            "Device is vulnerable to b/285142084 hence malicious app can access"
                                    + " user's location without any permissions")
                    .that((boolean) shouldUseNoOpLocationMethod.invoke(cameraActivity))
                    .isTrue();
        } catch (Exception | NoSuchMethodError e) {
            assume().that(e).isNull();
        }
    }
}
