/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_39622;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;

import android.app.Instrumentation;
import android.content.Context;
import android.content.Intent;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private static final int TIMEOUT_MS = 5000;
    private UiDevice mUiDevice;

    public void checkVulnerability(BySelector micIcon, BySelector vulText) {
        try {
            // Click microphone icon to expose the vulnerable toast
            mUiDevice.wait(Until.hasObject(micIcon), TIMEOUT_MS);
            mUiDevice.findObject(micIcon).click();
        } catch (Exception e) {
            // Ignore unintended exceptions here
        }

        assertFalse(mUiDevice.wait(Until.hasObject(vulText), TIMEOUT_MS));
    }

    @Test
    public void testPocCVE_2021_39622() {
        try {
            Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();
            mUiDevice = UiDevice.getInstance(instrumentation);
            Context context = instrumentation.getTargetContext();

            // Show Gboard and prepare VpnService
            context.startActivity(
                    new Intent(context, PocActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

            // OK button is used to allow vpn connection request
            BySelector okButton =
                    By.text(
                            Pattern.compile(
                                    context.getString(R.string.okButtonText),
                                    Pattern.CASE_INSENSITIVE));

            BySelector micIcon =
                    By.res(
                            context.getString(R.string.gboardPkgName),
                            context.getString(R.string.micIconResId));

            BySelector vulText =
                    By.text(
                            Pattern.compile(
                                    context.getString(R.string.vulnerableViewText),
                                    Pattern.CASE_INSENSITIVE));

            mUiDevice.wait(Until.hasObject(okButton), TIMEOUT_MS);
            mUiDevice.findObject(okButton).click();

            // In case permission was already denied using permission dialog box earlier, the
            // permission dialog box does not appear and the mic icon of gboard appears
            // unhighlighted indicating that mic permission is denied. Upon clicking the
            // unhighlighted mic icon, vulnerable toast is visible.
            checkVulnerability(micIcon, vulText);

            // In case permission was not denied using permission dialog box earlier, the permission
            // dialog box appears and pressing back turns the mic icon unhighlighted.
            mUiDevice.pressBack();

            // Check vulnerability after the mic icon is unhighlighted
            checkVulnerability(micIcon, vulText);

            // With fix the allow mic permission dialog box remains on screen
            mUiDevice.pressHome();
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
