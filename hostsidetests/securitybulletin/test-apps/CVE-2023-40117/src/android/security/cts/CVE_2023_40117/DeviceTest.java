/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40117;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.sts.common.SystemUtil.withSetting;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.content.ContentResolver;
import android.provider.Settings;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_40117() {
        try {
            Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();
            final String name = Settings.Global.SECURE_FRP_MODE;
            final String untrustedDefaults = "untrusted_defaults";
            final String untrustedClear = "untrusted_clear";
            final String trustedDefaults = "trusted_defaults";
            final String value = "1";
            final String global = "global";
            final String secure = "secure";
            try (AutoCloseable withSettingFrpAutoCloseable =
                            withSetting(instrumentation, global, name, value);

                    // Reset all other settings
                    AutoCloseable resetGlobalSettingUntrustedDefaults =
                            withResetSettingAutoCloseable(global, untrustedDefaults);
                    AutoCloseable resetGlobalSettingUntrustedClear =
                            withResetSettingAutoCloseable(global, untrustedClear);
                    AutoCloseable resetGlobalSettingTrustedDefaults =
                            withResetSettingAutoCloseable(global, trustedDefaults);
                    AutoCloseable resetSecureSettingUntrustedDefaults =
                            withResetSettingAutoCloseable(secure, untrustedDefaults);
                    AutoCloseable resetSecureSettingUntrustedClear =
                            withResetSettingAutoCloseable(secure, untrustedClear);
                    AutoCloseable resetSecureSettingTrustedDefaults =
                            withResetSettingAutoCloseable(secure, trustedDefaults)) {
                // With fix value of SECURE_FRP_MODE should still be "1", Without fix it will get
                // reset to null.
                ContentResolver contentResolver = instrumentation.getContext().getContentResolver();
                assertWithMessage(
                                "Device is vulnerable to b/253043065 !! SECURE_FRP_MODE should not"
                                    + " get reset when other settings get reset")
                        .that(Settings.Global.getString(contentResolver, name))
                        .isEqualTo(value);
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private AutoCloseable withResetSettingAutoCloseable(String namespace, String key) {
        final String originalValue =
                runShellCommand(String.format("settings get %s %s", namespace, key)).trim();

        // Reset settings
        runShellCommand(String.format("settings reset %s %s", namespace, key));

        // Returning AutoCloseable to reset the value
        return () -> {
            if (!originalValue.equals("null")) {
                runShellCommand(
                        String.format("settings put %s %s %s", namespace, key, originalValue));
            }
        };
    }
}
