/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_0602;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.ActivityManager;
import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.UserInfo;
import android.content.res.Resources;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiScrollable;
import androidx.test.uiautomator.UiSelector;
import androidx.test.uiautomator.Until;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private UiDevice mDevice;
    private final int WAIT_MS = 5000;

    // Wait for UiObject to appear and click on the UiObject if it is visible
    private boolean clickUiObject(BySelector selector) {
        boolean objectFound = mDevice.wait(Until.hasObject(selector), WAIT_MS);
        if (objectFound) {
            mDevice.findObject(selector).click();
        }
        return objectFound;
    }

    @Test
    public void testCVE_2021_0602() {
        Context context = null;
        UiAutomation uiAutomation = null;
        try {
            Instrumentation instrumentation = getInstrumentation();
            uiAutomation = instrumentation.getUiAutomation();
            mDevice = UiDevice.getInstance(instrumentation);
            context = instrumentation.getContext();
            CompletableFuture<String> exceptionMessage = new CompletableFuture<>();

            // Register a broadcast receiver to receive broadcast from PocActivity indicating
            // failure/success of adding Test Network configuration in device
            BroadcastReceiver broadcastReceiver =
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                if (intent.getAction()
                                        .equals(context.getString(R.string.broadcastAction))) {
                                    exceptionMessage.complete(
                                            intent.getStringExtra(
                                                    context.getString(R.string.broadcastMessage)));
                                }
                            } catch (Exception ignored) {
                                // ignore any exceptions
                            }
                        }
                    };

            IntentFilter filter = new IntentFilter(context.getString(R.string.broadcastAction));
            filter.addAction(context.getString(R.string.broadcastAction));
            context.registerReceiver(broadcastReceiver, filter);

            // Starting PocActivity to add Test Network configuration in Device
            context.startActivity(
                    new Intent(context, PocActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

            String message = exceptionMessage.get(WAIT_MS, TimeUnit.MILLISECONDS);
            assumeTrue(message, message.equals(context.getString(R.string.noExceptionMessage)));

            // Clicking on Save to add the TestNetwork in Saved Network List
            Pattern workPattern =
                    Pattern.compile(
                            context.getString(R.string.uiObjectSaveText), Pattern.CASE_INSENSITIVE);
            BySelector selector = By.text(workPattern);
            assumeTrue(
                    context.getString(
                            R.string.uiObjectNotFoundMsg,
                            context.getString(R.string.uiObjectSaveText)),
                    clickUiObject(selector));

            UserHandle guestUserHandle = null;
            uiAutomation.adoptShellPermissionIdentity();
            final List<UserInfo> list = context.getSystemService(UserManager.class).getUsers(true);
            for (UserInfo info : list) {
                if (info.toString().contains(context.getString(R.string.guestUserName))) {
                    guestUserHandle = info.getUserHandle();
                    break;
                }
            }

            // Switching to Guest User
            context.getSystemService(ActivityManager.class).switchUser(guestUserHandle);

            // Starting 'android.settings.DEVICE_INFO_SETTINGS' activity in Guest User
            Intent intent = new Intent(Settings.ACTION_DEVICE_INFO_SETTINGS);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivityAsUser(intent, guestUserHandle);

            String settingsPackageName =
                    intent.resolveActivity(context.getPackageManager()).getPackageName();
            Context settingsContext =
                    context.createPackageContext(
                            settingsPackageName, Context.CONTEXT_IGNORE_SECURITY);
            Resources res =
                    settingsContext
                            .getPackageManager()
                            .getResourcesForApplication(settingsPackageName);
            String text =
                    settingsContext.getString(
                            res.getIdentifier(
                                    context.getString(R.string.savedNetworkSettingResId),
                                    context.getString(R.string.resType),
                                    settingsPackageName));

            UiScrollable uiScrollable = new UiScrollable(new UiSelector().scrollable(true));
            uiScrollable.scrollTextIntoView(text);

            // Select 'WiFi MAC Address' - launches Saved Networks Settings Fragment
            selector = By.text(text);
            assumeTrue(
                    context.getString(
                            R.string.uiObjectNotFoundMsg,
                            context.getString(R.string.savedNetworkSettingResId)),
                    clickUiObject(selector));

            // Select testNetworkSSID network
            selector = By.text(context.getString(R.string.testNetworkSSID));
            assumeTrue(
                    context.getString(
                            R.string.uiObjectNotFoundMsg,
                            context.getString(R.string.testNetworkSSID)),
                    clickUiObject(selector));

            workPattern =
                    Pattern.compile(
                            context.getString(R.string.uiObjectForgetText),
                            Pattern.CASE_INSENSITIVE);
            selector = By.text(workPattern);
            mDevice.wait(Until.hasObject(selector), WAIT_MS);

            // on vulnerable device, the secured network details will be accessible to the guest
            // user. The test fails if the 'FORGET' object is found
            assertFalse(
                    context.getString(R.string.testFailMessage),
                    mDevice.findObject(selector) != null);
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                // Cleanup: Remove the TestNetwork from the Saved Network List
                WifiManager wifiManager = context.getSystemService(WifiManager.class);
                List<WifiConfiguration> configuredNetworks = wifiManager.getConfiguredNetworks();

                for (WifiConfiguration wifiConfiguration : configuredNetworks) {
                    if (wifiConfiguration.SSID.equals(
                            context.getString(R.string.testNetworkConfigSSID))) {
                        wifiManager.removeNetwork(wifiConfiguration.networkId);
                    }
                }
                uiAutomation.dropShellPermissionIdentity();
            } catch (Exception ignored) {
                // ignore any exceptions
            }
        }
    }
}
