/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21288;

import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.UiAutomation;
import android.content.ContentProvider;
import android.content.Context;
import android.content.pm.UserInfo;
import android.graphics.drawable.Icon;
import android.os.UserManager;
import android.service.notification.StatusBarNotification;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;
import java.util.Locale;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_21288() {
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();
            final UserManager userManager = context.getSystemService(UserManager.class);

            // Check if the device supports multiple users or not
            assume().withMessage("This device does not support multiple users")
                    .that(userManager.supportsMultipleUsers())
                    .isTrue();

            int testUserId = -1;
            // Retrieve created user Id
            try (AutoCloseable withAdoptShellPermissionIdentity =
                    withAdoptShellPermissionIdentity(
                            instrumentation, android.Manifest.permission.CREATE_USERS)) {
                final List<UserInfo> list = userManager.getUsers();
                for (UserInfo info : list) {
                    if (info.toString().contains("cve_2023_21288_user" /* TestUser name */)) {
                        testUserId = info.getUserHandle().getIdentifier();
                        break;
                    }
                }
            }
            assume().withMessage("Did not find the secondaryUserId for the test")
                    .that(testUserId)
                    .isNotEqualTo(-1);

            final String notificationChannelId = "notification_channel_id";
            Notification.Builder privateNotif =
                    new Notification.Builder(context, notificationChannelId)
                            .setSmallIcon(
                                    Icon.createWithData(
                                            new byte[0] /* data */, 0 /* offset */, 0 /* length */))
                            .setContentText("private_notification_content_text");

            // Created a crossUserIcon using image from secondaryUserId
            Icon crossUserIcon =
                    Icon.createWithContentUri(
                            ContentProvider.maybeAddUserId(EXTERNAL_CONTENT_URI, testUserId));

            // Created a public notification
            Notification.Builder publicNotif =
                    new Notification.Builder(context, notificationChannelId)
                            .setContentText("public_notification_content_text")
                            .setLargeIcon(crossUserIcon);
            privateNotif.setPublicVersion(publicNotif.build());
            Notification notif = privateNotif.build();

            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);

            // Create a notification channel
            NotificationChannel notificationChannel =
                    new NotificationChannel(
                            notificationChannelId,
                            "notification_channel_name",
                            NotificationManager.IMPORTANCE_HIGH);

            notificationManager.createNotificationChannel(notificationChannel);
            int notificationId = 1;
            try {
                notificationManager.notify(notificationId, notif);
            } catch (SecurityException securityException) {
                if (securityException
                        .getLocalizedMessage()
                        .toLowerCase(Locale.getDefault())
                        .contains(EXTERNAL_CONTENT_URI.toString())) {
                    // Ignore exception thrown with fix and exit the test
                    return;
                } else {
                    throw securityException;
                }
            }

            // Check if notification gets posted or not, Fail the test if notification gets posted
            assertWithMessage(
                            "Device is vulnerable to b/276294099 hence images belonging to another"
                                    + " user on the same device can be displayed in notifications")
                    .that(
                            poll(
                                    () -> {
                                        StatusBarNotification[] activeNotifications =
                                                notificationManager.getActiveNotifications();
                                        for (StatusBarNotification notification :
                                                activeNotifications) {
                                            if (notification.getId() == notificationId
                                                    && notification
                                                            .getPackageName()
                                                            .equals(context.getPackageName())) {
                                                return true;
                                            }
                                        }
                                        return false;
                                    }))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private AutoCloseable withAdoptShellPermissionIdentity(
            Instrumentation instrumentation, String permission) {
        UiAutomation uiAutomation = instrumentation.getUiAutomation();
        uiAutomation.adoptShellPermissionIdentity(permission);

        // Remove permissions
        return () -> uiAutomation.dropShellPermissionIdentity();
    }
}
