/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_0032;

import static android.provider.DocumentsContract.EXTERNAL_STORAGE_PRIMARY_EMULATED_ROOT_ID;
import static android.provider.DocumentsContract.EXTERNAL_STORAGE_PROVIDER_AUTHORITY;
import static android.provider.DocumentsContract.EXTRA_INITIAL_URI;
import static android.provider.DocumentsContract.buildDocumentUri;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.content.Context;
import android.content.Intent;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    @Test
    public void testPocCVE_2024_0032() {
        UiDevice uiDevice = null;
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();
            String subdirectoryName = "CVE_2024_0032";
            try (AutoCloseable createSubDirectory = createSubDirectory(context, subdirectoryName)) {
                // Launch activity to reproduce the vulnerability
                Intent intent =
                        new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE)
                                .putExtra(
                                        EXTRA_INITIAL_URI,
                                        buildDocumentUri(
                                                EXTERNAL_STORAGE_PROVIDER_AUTHORITY,
                                                EXTERNAL_STORAGE_PRIMARY_EMULATED_ROOT_ID
                                                        + ":Android/data/"
                                                        + context.getPackageName()
                                                        + "/files"))
                                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(intent);

                // Wait for activity to be launched
                uiDevice = UiDevice.getInstance(instrumentation);
                assume().withMessage("Failed to launch activity")
                        .that(
                                checkActivityLaunched(
                                        intent.resolveActivity(context.getPackageManager())
                                                .flattenToString()))
                        .isTrue();

                // Get object containing 'CVE_2024_0032' with resource-id 'android:id/title'
                UiObject2 uiObject =
                        uiDevice.wait(
                                Until.findObject(
                                        By.textContains(subdirectoryName).res("android:id/title")),
                                5_000L /* timeout */);

                // Without Fix, UI for subdirectory of 'Android/data/' is detected by UIAutomator
                // and test fails
                assertWithMessage(
                                "Device is vulnerable to b/283962634 !! Bypass access restriction"
                                        + " on Android/data/directory and all subdirectories")
                        .that(uiObject)
                        .isNull();
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        } finally {
            try {
                // Exit the test gracefully
                uiDevice.pressHome();
            } catch (Exception ignore) {
                // Ignore
            }
        }
    }

    private AutoCloseable createSubDirectory(Context context, String subdirectoryName)
            throws Exception {
        // Create subdirectory in 'Android/data'
        File subdirectory = new File(context.getExternalFilesDir(null), subdirectoryName);
        assume().withMessage("Failed to get external files directory")
                .that(subdirectory)
                .isNotNull();
        assume().withMessage("Failed to create subdirectory").that(subdirectory.mkdirs()).isTrue();

        // Return AutoCloseable to delete subdirectory created
        return () -> subdirectory.delete();
    }

    private boolean checkActivityLaunched(String activityName) throws Exception {
        final Pattern resumedPattern =
                Pattern.compile("mResumed=(?<value>(true|false))", Pattern.CASE_INSENSITIVE);
        return poll(
                () -> {
                    String dumpsys =
                            runShellCommand(String.format("dumpsys activity " + activityName));
                    Matcher matcher = resumedPattern.matcher(dumpsys);
                    if (matcher.find() && matcher.group("value").equals("true")) {
                        return true;
                    }
                    return false;
                });
    }
}
