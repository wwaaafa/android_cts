/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21272_test;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;

import android.app.ActivityManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.Uri;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Constructor;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_21272() {
        try {
            Context context = getInstrumentation().getContext();

            // 'Path', 'PathPart', and 'HierarchicalUri' classes are in default scope of Uri.java.
            // Hence, reflection is used to access their APIs
            final String targetPkg = "android.security.cts.CVE_2023_21272_helper";
            Class partClass = Class.forName("android.net.Uri$Part");
            Constructor partConstructor =
                    partClass.getDeclaredConstructor(String.class, String.class);
            partConstructor.setAccessible(true);

            Class pathPartClass = Class.forName("android.net.Uri$PathPart");
            Constructor pathPartConstructor =
                    pathPartClass.getDeclaredConstructor(String.class, String.class);
            pathPartConstructor.setAccessible(true);

            Class hierarchicalUriClass = Class.forName("android.net.Uri$HierarchicalUri");
            Constructor hierarchicalUriConstructor =
                    hierarchicalUriClass.getDeclaredConstructor(
                            String.class, partClass, pathPartClass, partClass, partClass);
            hierarchicalUriConstructor.setAccessible(true);

            final String testAuthority = "download";
            Object authority = partConstructor.newInstance(testAuthority, testAuthority);
            final String testPath = "s/all_downloads";
            Object path = pathPartConstructor.newInstance(testPath, testPath);
            Uri testUri =
                    (Uri)
                            hierarchicalUriConstructor.newInstance(
                                    "content",
                                    authority,
                                    path,
                                    null /* query */,
                                    null /* fragment */);
            Semaphore broadcastReceived = new Semaphore(0);
            final String broadcastAction = "CVE_2023_21272_broadcastAction";

            // Register a broadcast receiver to receive broadcast from PocActivity indicating
            // presence of vulnerability
            BroadcastReceiver broadcastReceiver =
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                if (intent.getAction().equals(broadcastAction)) {
                                    broadcastReceived.release();
                                }
                            } catch (Exception ignored) {
                                // ignore any exceptions
                            }
                        }
                    };

            context.registerReceiver(broadcastReceiver, new IntentFilter(broadcastAction));

            // Grant read uri permission to 'targetPkg' for 'testUri'
            ActivityManager.getService()
                    .grantUriPermission(
                            context.getIApplicationThread(),
                            targetPkg,
                            testUri,
                            Intent.FLAG_GRANT_READ_URI_PERMISSION,
                            context.getUserId());

            // Check if the uri permission was granted to correct authority or not. Without fix,
            // permission is granted to 'downloads' authority and the test fails
            context.startActivity(
                    new Intent()
                            .setClassName(targetPkg, targetPkg + ".PocActivity")
                            .putExtra(Intent.EXTRA_INTENT, new Intent(broadcastAction))
                            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
            assertFalse(
                    "Vulnerable to b/227471459",
                    broadcastReceived.tryAcquire(5_000 /* waitMs */, TimeUnit.MILLISECONDS));
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
