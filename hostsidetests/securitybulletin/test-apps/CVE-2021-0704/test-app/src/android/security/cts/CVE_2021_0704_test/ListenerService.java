/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_0704_test;

import android.app.Notification;
import android.app.NotificationManager;
import android.content.Intent;
import android.os.Bundle;
import android.service.notification.NotificationListenerService;
import android.service.notification.StatusBarNotification;

import java.util.regex.Pattern;

public class ListenerService extends NotificationListenerService {

    @Override
    public void onListenerConnected() {
        try {
            for (StatusBarNotification sbn : getActiveNotifications()) {
                if (broadcastIfVulnerableNotificationFound(sbn)) {
                    break;
                }
            }
        } catch (Exception ignored) {
            // ignore exceptions here since they maybe because of missing tag, notification text,
            // etc. from notifications unrelated to the test.
        }
    }

    @Override
    public void onNotificationPosted(StatusBarNotification sbn) {
        try {
            broadcastIfVulnerableNotificationFound(sbn);
        } catch (Exception ignored) {
            // ignore exceptions here since they maybe because of missing tag, notification text,
            // etc. from notifications unrelated to the test.
        }
    }

    private boolean broadcastIfVulnerableNotificationFound(StatusBarNotification sbn) {
        // Get text and title from the notification
        Bundle notificationExtras = sbn.getNotification().extras;
        String notificationText = notificationExtras.getString(Notification.EXTRA_TEXT);
        String notificationTitle = notificationExtras.getString(Notification.EXTRA_TITLE);

        // Sending broadcast if account notification access notification is received successfully
        // with status as vulnerable if notification title doesn't contain account app label and
        // notification belongs to test package.
        Pattern pattern =
                Pattern.compile(getString(R.string.patternAccMgrService), Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(sbn.getTag()).find()
                && notificationText.contains(getString(R.string.accountName))) {
            // Cancel the notification since relevant information has been already extracted.
            NotificationManager notificationManager = getSystemService(NotificationManager.class);
            notificationManager.cancel(sbn.getTag(), sbn.getId());

            if (sbn.getPackageName().equalsIgnoreCase(getPackageName())
                    && !notificationTitle.contains(getString(R.string.accountAppLabel))) {
                sendBroadcast(new Intent(getString(R.string.actionTestFail)));
                return true;
            } else if (sbn.getPackageName().equalsIgnoreCase(getString(R.string.pkgAndroid))
                    && notificationTitle.contains(getString(R.string.accountAppLabel))) {
                sendBroadcast(new Intent(getString(R.string.actionTestPass)));
                return true;
            }
        }
        return false;
    }
}
