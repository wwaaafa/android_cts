/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_0704_test;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.accounts.AccountManager;
import android.app.NotificationManager;
import android.app.UiAutomation;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private static final int TIMEOUT_SEC = 10;

    @Test
    public void testAccountsObtainable() {
        String listenerName = null;
        Intent intent = null;
        Context context = null;
        UiAutomation uiAutomation = null;
        try {
            context = getInstrumentation().getTargetContext();
            uiAutomation = getInstrumentation().getUiAutomation();

            // Allow the Notification Listener Service "ListenerService" to receive notifications
            ComponentName listenerComponent = new ComponentName(context, ListenerService.class);
            listenerName = listenerComponent.flattenToString();
            uiAutomation.executeShellCommand(
                    context.getString(R.string.cmdNotifAllowListener, listenerName));
            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);

            // Wait for the notification listener service to be granted access
            final long timeoutMs = 5000;
            final long startTime = System.currentTimeMillis();
            while (System.currentTimeMillis() - startTime < timeoutMs && !notificationManager
                    .isNotificationListenerAccessGranted(listenerComponent)) {
                Thread.sleep(100);
            }
            assumeTrue(context.getString(R.string.msgNotGrantedAccess, listenerName),
                    notificationManager.isNotificationListenerAccessGranted(listenerComponent));

            // Add an account and start sync service to trigger account authentication
            AccountManager accountManager = context.getSystemService(AccountManager.class);
            accountManager.addAccount(context.getString(R.string.accountType), null, null, null,
                    null, null, null);
            intent = new Intent(context, SyncService.class);
            context.startService(intent);

            // Defining a receiver here to wait for a broadcast from ListenerService
            CompletableFuture<Boolean> vulNotifFoundReturn = new CompletableFuture<>();
            BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    try {
                        if (intent.getAction().equals(context.getString(R.string.actionTestFail))) {
                            vulNotifFoundReturn.complete(true);
                        } else if (intent.getAction()
                                .equals(context.getString(R.string.actionTestPass))) {
                            vulNotifFoundReturn.complete(false);
                        }
                    } catch (Exception ignored) {
                        // ignore any exceptions.
                    }
                }
            };
            IntentFilter filter = new IntentFilter();
            filter.addAction(context.getString(R.string.actionTestFail));
            filter.addAction(context.getString(R.string.actionTestPass));
            context.registerReceiver(broadcastReceiver, filter);

            // Wait for the broadcast from the ListenerService. On vulnerable device, account access
            // notification will not contain test package label, detecting this, broadcast is
            // triggered and received within timeout.
            assertFalse(context.getString(R.string.failMsg),
                    vulNotifFoundReturn.get(TIMEOUT_SEC, TimeUnit.SECONDS));
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                // Stopping sync service
                context.stopService(intent);

                // Stopping notification listener
                uiAutomation.executeShellCommand(
                        context.getString(R.string.cmdNotifDisallowListener, listenerName));
            } catch (Exception ignored) {
                // ignore all exceptions as the test has been completed.
            }
        }
    }
}
