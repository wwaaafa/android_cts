/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40094;

import static android.Manifest.permission.CONTROL_KEYGUARD;
import static android.content.Context.ACTIVITY_TASK_SERVICE;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.IActivityTaskManager;
import android.os.IBinder;
import android.os.Parcel;
import android.os.ServiceManager;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Field;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_40094() {
        try {
            // Append data to a parcel and pass as an argument while invoking
            // 'transact()' of 'ActivityTaskManagerService'
            Parcel data = Parcel.obtain();
            Parcel reply = Parcel.obtain();
            data.writeInterfaceToken(IActivityTaskManager.class.getCanonicalName());
            data.writeInt(0 /* flags */);

            // Fetch the transaction method code for 'keyguardGoingAway'
            final Field transactMethodField =
                    IActivityTaskManager.Stub.class.getDeclaredField(
                            "TRANSACTION_keyguardGoingAway");
            transactMethodField.setAccessible(true);
            final int transactMethodCode = (int) transactMethodField.get(null);

            // Invoke 'transact()' to detect vulnerability
            try {
                final IBinder binder = ServiceManager.getService(ACTIVITY_TASK_SERVICE);
                binder.transact(transactMethodCode, data, reply, 0 /* normal RPC */);
                reply.readException();
            } catch (SecurityException securityException) {
                if (securityException.getLocalizedMessage().contains(CONTROL_KEYGUARD)) {
                    // SecurityException is expected with fix and hence exit the test
                    return;
                } else {
                    throw securityException;
                }
            } finally {
                reply.recycle();
                data.recycle();
            }

            // Fail the test if SecurityException doesn't occur
            assertWithMessage("Device is vulnerable to b/288896339 !!").fail();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
