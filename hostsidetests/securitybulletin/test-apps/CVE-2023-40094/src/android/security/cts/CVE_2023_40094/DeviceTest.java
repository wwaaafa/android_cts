/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40094;

import static android.Manifest.permission.CONTROL_KEYGUARD;
import static android.view.WindowManagerPolicyConstants.KEYGUARD_GOING_AWAY_FLAG_TO_SHADE;

import static com.google.common.truth.TruthJUnit.assume;

import static org.junit.Assert.fail;

import android.app.ActivityTaskManager;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_40094() {
        try {
            // Call the vulnerable function 'keyguardGoingAway()'
            try {
                ActivityTaskManager.getService()
                        .keyguardGoingAway(KEYGUARD_GOING_AWAY_FLAG_TO_SHADE);
            } catch (SecurityException securityException) {
                if (securityException.getLocalizedMessage().contains(CONTROL_KEYGUARD)) {
                    // SecurityException is expected with fix and hence exit the test
                    return;
                }
                throw securityException;
            }

            // Fail the test if SecurityException doesn't occur
            fail("Device is vulnerable to b/288896339 !!");
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
