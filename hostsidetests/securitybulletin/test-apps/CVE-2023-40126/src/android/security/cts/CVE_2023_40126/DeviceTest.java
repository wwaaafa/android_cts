/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40126;

import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.content.pm.PackageManager.PERMISSION_DENIED;
import static android.content.pm.PackageManager.PERMISSION_GRANTED;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.net.Uri;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.OutputStream;
import java.util.Arrays;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_40126() {
        UiAutomation uiAutomation = null;
        boolean permissionGranted = false;
        String contactsPackageName = "com.android.contacts";
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();
            Intent contactsIntent =
                    new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_APP_CONTACTS);

            // Fix is part of com.android.contacts package. Skip test if package not found
            assume().withMessage("Skipping test: Package com.android.contacts not found")
                    .that(
                            contactsPackageName.equals(
                                    contactsIntent
                                            .resolveActivity(context.getPackageManager())
                                            .getPackageName()))
                    .isTrue();
            Uri vcardUri = Uri.parse("content://authority_CVE_2023_40126/file_path/contacts.vcf");
            try (OutputStream outputStream =
                    context.getContentResolver().openOutputStream(vcardUri); ) {
                outputStream.write("".getBytes());
            }

            uiAutomation = instrumentation.getUiAutomation();
            PackageManager packageManager = context.getPackageManager();
            PackageInfo info =
                    packageManager.getPackageInfo(
                            contactsPackageName, PackageManager.GET_PERMISSIONS);
            if (Arrays.asList(info.requestedPermissions).contains(READ_EXTERNAL_STORAGE)
                    && packageManager.checkPermission(READ_EXTERNAL_STORAGE, contactsPackageName)
                            == PERMISSION_DENIED) {
                // grant android.permission.READ_EXTERNAL_STORAGE to com.android.contacts
                uiAutomation.grantRuntimePermission(contactsPackageName, READ_EXTERNAL_STORAGE);
                assume().withMessage(
                                "Failed to grant "
                                        + READ_EXTERNAL_STORAGE
                                        + " permission to "
                                        + contactsPackageName)
                        .that(
                                packageManager.checkPermission(
                                                READ_EXTERNAL_STORAGE, contactsPackageName)
                                        == PERMISSION_GRANTED)
                        .isTrue();
                permissionGranted = true;
            }
            context.startActivity(
                    new Intent()
                            .setAction(Intent.ACTION_VIEW)
                            .setData(vcardUri)
                            .putExtra("account_name", "test@test.com")
                            .putExtra("account_type", "com.test")
                            .putExtra("data_set", "")
                            .addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
            Resources res =
                    context.getPackageManager().getResourcesForApplication(contactsPackageName);
            String checkText =
                    res.getString(
                            res.getIdentifier(
                                    "import_from_vcf_file_confirmation_message",
                                    "string",
                                    contactsPackageName));
            assertWithMessage("Vulnerable to b/278556954")
                    .that(
                            UiDevice.getInstance(instrumentation)
                                    .wait(Until.findObject(By.text(checkText)), 5000 /* timeout */))
                    .isNull();
        } catch (Exception e) {
            assume().that(e).isNull();
        } finally {
            try {
                if (permissionGranted) {
                    uiAutomation.revokeRuntimePermission(
                            contactsPackageName, READ_EXTERNAL_STORAGE);
                }
            } catch (Exception ignored) {
                // ignore all exceptions
            }
        }
    }
}
