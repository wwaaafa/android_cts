/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *s
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_0053;

import static android.os.UserHandle.USER_NULL;
import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static com.google.common.truth.TruthJUnit.assume;

import android.content.ContentProvider;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.drawable.Icon;
import android.net.Uri;
import android.os.CancellationSignal;
import android.print.PrinterId;
import android.print.PrinterInfo;
import android.printservice.CustomPrinterIconCallback;
import android.printservice.PrintJob;
import android.printservice.PrintService;
import android.printservice.PrinterDiscoverySession;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;

public class TestPrintService extends PrintService {

    @Override
    protected void onRequestCancelPrintJob(PrintJob printJob) {}

    @Override
    protected void onPrintJobQueued(PrintJob printJob) {}

    @Nullable
    @Override
    protected PrinterDiscoverySession onCreatePrinterDiscoverySession() {
        // Generate printerId of "cve_2024_0053_printer" and start printer discovery session
        PrinterId printerId = generatePrinterId(getString(R.string.localPrinterId));
        return new TestDiscoverySession(printerId);
    }

    class TestDiscoverySession extends PrinterDiscoverySession {
        PrinterId mPrinterId;

        public TestDiscoverySession(PrinterId id) {
            mPrinterId = id;
        }

        @Override
        public void onStartPrinterStateTracking(@NonNull PrinterId printerId) {}

        @Override
        public void onStopPrinterStateTracking(@NonNull PrinterId printerId) {}

        @Override
        public void onStartPrinterDiscovery(@NonNull List<PrinterId> priorityList) {
            // Build and add 'cve_2024_0053_printer'
            PrinterInfo.Builder pBuilder =
                    new PrinterInfo.Builder(
                            mPrinterId, getString(R.string.printerName), PrinterInfo.STATUS_IDLE);
            pBuilder.setHasCustomPrinterIcon(true);
            PrinterInfo pInfo = pBuilder.build();
            ArrayList<PrinterInfo> pList = new ArrayList<PrinterInfo>();
            pList.add(pInfo);
            addPrinters(pList);
        }

        @Override
        public void onStopPrinterDiscovery() {}

        @Override
        public void onRequestCustomPrinterIcon(
                @NonNull PrinterId printerId,
                @NonNull CancellationSignal cancellationSignal,
                @NonNull CustomPrinterIconCallback callback) {
            String exception = null;
            try {
                // Get userId of 'cve_2024_0053_user'
                final SharedPreferences sharedPreferences =
                        getSharedPreferences(getPackageName(), MODE_PRIVATE);
                int userId = sharedPreferences.getInt("userId", USER_NULL);
                assume().withMessage("Could not get user id of secondary user in print service")
                        .that(userId)
                        .isNotEqualTo(USER_NULL);

                // Get uri of 'cve_2024_0053_user's image
                String imageId = sharedPreferences.getString("imageId", null /* default id */);
                assume().withMessage(
                                "Could not get image id of secondary user's image in print service")
                        .that(imageId)
                        .isNotNull();
                final String targetImageUri =
                        String.format(
                                "%s/%s",
                                ContentProvider.maybeAddUserId(EXTERNAL_CONTENT_URI, userId),
                                imageId);

                // Set icon of "cve_2024_0053_printer" as cve_2024_0053_user's image
                Icon icon = Icon.createWithContentUri(Uri.parse(targetImageUri));
                callback.onCustomPrinterIconLoaded(icon);
            } catch (Exception e) {
                exception = e.getMessage();
            } finally {
                try {
                    Intent intent = new Intent("cve_2024_0053_action");
                    intent.putExtra("exception", exception);
                    sendBroadcast(intent);
                } catch (Exception e) {
                    // Ignore all exceptions
                }
            }
        }

        @Override
        public void onValidatePrinters(@NonNull List<PrinterId> printerIds) {}

        @Override
        public void onDestroy() {}
    }
}
