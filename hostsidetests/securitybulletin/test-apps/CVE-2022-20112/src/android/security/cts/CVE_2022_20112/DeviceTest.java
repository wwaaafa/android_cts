/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20112;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.UserManager;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPrivateDnsPreferenceController() {
        try {
            final Instrumentation instrumentation = getInstrumentation();
            final Context context = instrumentation.getContext();

            // Retrieve settings package name dynamically
            Intent settingsIntent = new Intent(Settings.ACTION_SETTINGS);
            ComponentName settingsComponent =
                    settingsIntent.resolveActivity(context.getPackageManager());
            String settingsPkgName =
                    settingsComponent != null
                            ? settingsComponent.getPackageName()
                            : "com.android.settings";

            // Get vulnerable method 'getAvailabilityStatus' using reflection
            final Context settingsContext =
                    context.createPackageContext(
                            settingsPkgName,
                            Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
            ClassLoader settingsClassLoader = settingsContext.getClassLoader();
            Class<?> privateDnsPreferenceControllerClass =
                    settingsClassLoader.loadClass(
                            settingsPkgName + ".network.PrivateDnsPreferenceController");
            Constructor<?> privateDnsPreferenceControllerCstr =
                    privateDnsPreferenceControllerClass.getConstructor(Context.class);
            Object privateDnsPreferenceControllerObject =
                    privateDnsPreferenceControllerCstr.newInstance(settingsContext);
            Method getAvailabilityStatusMethod =
                    privateDnsPreferenceControllerClass.getDeclaredMethod("getAvailabilityStatus");
            getAvailabilityStatusMethod.setAccessible(true);

            // Check if current user is guest user
            final UserManager userManager = context.getSystemService(UserManager.class);
            try (AutoCloseable withAdoptShellPermissionIdentity =
                    withAdoptShellPermissionIdentity(
                            instrumentation, android.Manifest.permission.CREATE_USERS)) {
                assumeTrue(userManager.isGuestUser());
                // Invoke vulnerable method 'getAvailabilityStatus'
                int status =
                        (int)
                                getAvailabilityStatusMethod.invoke(
                                        privateDnsPreferenceControllerObject);
                assertFalse(
                        "Device is vulnerable to b/206987762!! Private DNS can be modified in"
                                + " guest mode",
                        status == 0 /* AVAILABLE */);
            }
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    private AutoCloseable withAdoptShellPermissionIdentity(
            Instrumentation instrumentation, String permission) {
        final UiAutomation uiAutomation = instrumentation.getUiAutomation();
        uiAutomation.adoptShellPermissionIdentity(permission);

        // Remove permissions
        return () -> uiAutomation.dropShellPermissionIdentity();
    }
}
