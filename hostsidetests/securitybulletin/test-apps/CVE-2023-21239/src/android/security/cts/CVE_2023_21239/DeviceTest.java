/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21239;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.SystemUtil.poll;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Person;
import android.app.UiAutomation;
import android.content.ContentProvider;
import android.content.Context;
import android.content.Intent;
import android.content.pm.UserInfo;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.drawable.Icon;
import android.net.Uri;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.MediaStore;
import android.service.notification.StatusBarNotification;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    Instrumentation mInstrumentation;

    private AutoCloseable withAdoptShellPermissionIdentity(String permission) {
        UiAutomation uiAutomation = mInstrumentation.getUiAutomation();
        uiAutomation.adoptShellPermissionIdentity(permission);

        // Remove permissions
        return () -> uiAutomation.dropShellPermissionIdentity();
    }

    @Test
    public void testCallStyleNotification() {
        try {
            mInstrumentation = getInstrumentation();
            Context context = mInstrumentation.getContext();
            int testUserId = -1;

            // Retrieve created user Id
            try (AutoCloseable withAdoptShellPermissionIdentity =
                    withAdoptShellPermissionIdentity(android.Manifest.permission.CREATE_USERS)) {
                final List<UserInfo> list =
                        context.getSystemService(UserManager.class).getUsers(true);
                for (UserInfo info : list) {
                    if (info.toString().contains("cve_2023_21239_user" /* testUser name */)) {
                        testUserId = info.getUserHandle().getIdentifier();
                        break;
                    }
                }
            }
            assumeTrue(testUserId != -1);

            // Create a pending intent for notification
            Intent intent = new Intent();
            PendingIntent pendingIntent =
                    PendingIntent.getActivity(
                            context, 0 /* request code */, intent, PendingIntent.FLAG_MUTABLE);

            // Retrieve contentUri with userId
            Uri contentUriWithUser =
                    ContentProvider.createContentUriForUser(
                            MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                            UserHandle.of(testUserId));

            // Create personIcon using URI to access the media from cve_2023_21239_User
            Icon personIcon = Icon.createWithContentUri(contentUriWithUser);

            // Create person
            Person person =
                    new Person.Builder()
                            .setName("cve_2023_21239_person" /* person name */)
                            .setIcon(personIcon)
                            .setImportant(true /* high priority */)
                            .build();

            // Create style so that the notification created is callStyle
            Notification.CallStyle style =
                    Notification.CallStyle.forOngoingCall(person, pendingIntent);

            // Create smallIcon for notification
            Bitmap testBitmap =
                    Bitmap.createBitmap(30 /* width */, 30 /* height */, Bitmap.Config.ARGB_8888);
            final Canvas canvas = new Canvas(testBitmap);
            canvas.drawColor(Color.BLUE);
            Icon notificationIcon = Icon.createWithBitmap(testBitmap);

            // Set notification channel id
            String notificationChannelId = "notification_channel_id";

            // Create notification
            Notification callNotification =
                    new Notification.Builder(context, notificationChannelId)
                            .setStyle(style)
                            .setCategory(Notification.CATEGORY_CALL)
                            .setSmallIcon(notificationIcon)
                            .setContentIntent(pendingIntent)
                            .setFullScreenIntent(pendingIntent, true /* high priority */)
                            .build();

            // Create a notification channel
            NotificationChannel notificationChannel =
                    new NotificationChannel(
                            notificationChannelId,
                            "cve_2023_21239_notification_channel" /* notification channel name */,
                            NotificationManager.IMPORTANCE_HIGH);

            // Post the notification
            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);
            notificationManager.createNotificationChannel(notificationChannel);

            // Check if any security exception is caught
            int notificationId = 0;
            try {
                notificationManager.notify(notificationId, callNotification);
            } catch (SecurityException securityException) {
                if (securityException
                        .getLocalizedMessage()
                        .toLowerCase()
                        .contains(MediaStore.Images.Media.EXTERNAL_CONTENT_URI.toString())) {
                    // Ignore exception thrown with fix and exit the test
                    return;
                } else {
                    throw securityException;
                }
            }

            // Check if notification gets posted or not, fail the test if notification gets posted
            assertFalse(
                    "Device is vulnerable to b/274592467 hence images belonging to another user on"
                        + " the same device can be displayed in CallStyle notifications",
                    poll(
                            () -> {
                                StatusBarNotification[] activeNotifications =
                                        notificationManager.getActiveNotifications();
                                for (StatusBarNotification notification : activeNotifications) {
                                    if (notification.getId() == notificationId
                                            && notification
                                                    .getPackageName()
                                                    .equals(context.getPackageName())) {
                                        return true;
                                    }
                                }
                                return false;
                            }));
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
