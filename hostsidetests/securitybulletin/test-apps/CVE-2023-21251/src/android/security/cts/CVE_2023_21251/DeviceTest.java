/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21251;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.internal.net.VpnConfig.DIALOGS_PACKAGE;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_21251() {
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getTargetContext();

            // Registering a broadcast receiver to wait for PocActivity to start
            Semaphore broadcastReceived = new Semaphore(0);
            BroadcastReceiver broadcastReceiver =
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                broadcastReceived.release();
                            } catch (Exception ignore) {
                                // ignore
                            }
                        }
                    };
            IntentFilter broadcastFilter =
                    new IntentFilter(context.getString(R.string.broadcastAction));
            context.registerReceiver(broadcastReceiver, broadcastFilter);

            // Start and wait for PocActivity to be launched
            Intent intent =
                    new Intent(context, PocActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);
            final int timeout = 10000;
            assumeTrue(
                    context.getString(R.string.activityNotStarted),
                    broadcastReceived.tryAcquire(timeout, TimeUnit.MILLISECONDS));

            // Wait for the ConfirmDialog window to be launched
            final UiDevice uiDevice = UiDevice.getInstance(instrumentation);
            UiObject2 uiObject =
                    uiDevice.wait(Until.findObject(By.pkg(DIALOGS_PACKAGE)
                            .res(DIALOGS_PACKAGE, context.getString(R.string.resId))),
                            timeout);
            assumeNotNull(context.getString(R.string.confirmDialogNotAppeared), uiObject);

            // With fix, uiobject's text field contains html syntax.
            final String lineSeparator = System.lineSeparator();
            final String decodedHtml =
                    context.getString(R.string.bugIdDecoded, lineSeparator, lineSeparator);
            assertFalse(
                    context.getString(R.string.failMessage),
                    uiObject.getText().contains(decodedHtml));
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
