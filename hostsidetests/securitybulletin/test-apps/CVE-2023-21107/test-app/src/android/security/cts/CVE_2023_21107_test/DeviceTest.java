/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21107_test;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.SystemUtil.poll;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;

import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.Context;
import android.content.Intent;
import android.content.pm.UserInfo;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.UiDevice;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    @Test
    public void testCVE_2023_21107() {
        UiAutomation uiAutomation = null;
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();
            uiAutomation = instrumentation.getUiAutomation();

            UserHandle workUserHandle = null;
            uiAutomation.adoptShellPermissionIdentity(android.Manifest.permission.CREATE_USERS);
            for (UserInfo info : context.getSystemService(UserManager.class).getUsers()) {
                if (info.toString().contains("CVE_2023_21107_TestUser")) {
                    workUserHandle = info.getUserHandle();
                    break;
                }
            }
            assumeNotNull(workUserHandle);

            // NotificationAccessDetailsActivity should not launch for another
            // user id without android.permission.INTERACT_ACROSS_USERS_FULL
            Intent intent = new Intent(Settings.ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGS);
            String helperAppPackage = "android.security.cts.CVE_2023_21107_helper";
            intent.putExtra(
                    Settings.EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME,
                    helperAppPackage + "/" + helperAppPackage + ".TestListener");
            intent.putExtra(Intent.EXTRA_USER_HANDLE, workUserHandle);
            context.startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

            // Test fails if NotificationAccessDetailsActivity is launched
            assertFalse(
                    "Vulnerable to b/259385017",
                    checkActivityLaunched(UiDevice.getInstance(instrumentation)));
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                uiAutomation.dropShellPermissionIdentity();
            } catch (Exception ignored) {
                // Ignore all exceptiions
            }
        }
    }

    private boolean checkActivityLaunched(final UiDevice device) throws Exception {
        final Pattern resumedPattern = Pattern.compile("mResumed=(?<value>(true|false))");
        return poll(
                () -> {
                    try {
                        String dumpsys =
                                device.executeShellCommand(
                                        String.format(
                                                "dumpsys activity "
                                                        + "NotificationAccessDetailsActivity"));
                        Matcher matcher = resumedPattern.matcher(dumpsys);
                        if (matcher.find() && matcher.group("value").equals("true")) {
                            return true;
                        }
                    } catch (Exception e) {
                        assumeNoException(e);
                    }
                    return false;
                },
                1_000L /* pollingTime */,
                5_000L /* maxPollingTime */);
    }
}
