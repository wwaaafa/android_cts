/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.security.cts.CVE_2023_21145;

import android.app.Activity;
import android.app.PictureInPictureParams;
import android.content.Intent;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Process;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class PipActivity extends Activity {

    @Override
    protected void onResume() {
        super.onResume();

        // Start PocActivity
        startActivity(new Intent(this, PocActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

        // Create HandlerThread and post the Runnable tasks
        HandlerThread handlerThread = new HandlerThread(getPackageName());
        handlerThread.start();
        Handler handler = new Handler(handlerThread.getLooper());

        // Enter into pip mode after 2000 ms delay
        final long timeout = 2_000L;
        handler.postDelayed(
                () -> enterPictureInPictureMode(new PictureInPictureParams.Builder().build()),
                timeout);

        // Kill current process after 2000 ms delay of entering pip mode
        Semaphore releaseOnResume = new Semaphore(0);
        handler.postDelayed(
                () -> {
                    Process.killProcess(Process.myTid());
                    releaseOnResume.release();
                },
                timeout * 2);

        // To hold the process in onResume until the process dies.
        try {
            releaseOnResume.tryAcquire(10_000L /* timeout */, TimeUnit.MILLISECONDS);
        } catch (InterruptedException ignore) {
            // Ignore
        }
    }
}
