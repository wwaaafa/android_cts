/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40111;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private String mPocActivityStatus;

    @Test
    public void testCVE_2023_40111() {
        try {
            final Semaphore pocReturn = new Semaphore(0);
            final Semaphore targetReturn = new Semaphore(0);
            Context context = getApplicationContext();
            BroadcastReceiver broadcastReceiver =
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                // Check if TargetActivity gets launched
                                if (intent.getBooleanExtra(
                                        context.getString(R.string.isVulnerable), false)) {
                                    targetReturn.release();
                                }

                                // Check if PocActivity launched successfully
                                mPocActivityStatus =
                                        intent.getStringExtra(
                                                context.getString(R.string.pocActivityStatus));
                                if (mPocActivityStatus != null) {
                                    pocReturn.release();
                                }
                            } catch (Exception ignored) {
                                // Ignore any exceptions
                            }
                        }
                    };
            IntentFilter filter = new IntentFilter(context.getString(R.string.bcastAction));
            context.registerReceiver(broadcastReceiver, filter, Context.RECEIVER_EXPORTED);

            // Start PocActivity
            final int timeoutMs = 5000;
            context.startActivity(
                    new Intent(context, PocActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
            assume().withMessage("PocActivity not launched")
                    .that(pocReturn.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS))
                    .isTrue();
            assume().withMessage("PocActivity crashed with exception: %s", mPocActivityStatus)
                    .that(mPocActivityStatus)
                    .isEqualTo(context.getString(R.string.noExceptionMsg));

            // Wait on call from TargetActivity. On vulnerable device, TargetActivity will
            // launch and the test fail, with fix TargetActivity will not launch.
            assertWithMessage("Device is vulnerable to b/272024837 !!")
                    .that(targetReturn.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
