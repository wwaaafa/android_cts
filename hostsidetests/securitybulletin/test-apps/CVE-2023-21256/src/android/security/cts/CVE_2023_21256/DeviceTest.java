/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21256;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.UserHandle;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import com.android.bedstead.nene.utils.Poll;
import com.android.internal.app.PlatLogoActivity;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.time.Duration;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private UiDevice mUiDevice;

    @Test
    public void testSettingsHomePageActivityFromWorkProfile() {
        UiAutomation uiAutomation = null;
        try {
            final long timeoutMs = 10_000L;
            Instrumentation instrumentation = getInstrumentation();
            uiAutomation = instrumentation.getUiAutomation();
            mUiDevice = UiDevice.getInstance(instrumentation);
            Context context = instrumentation.getContext();
            String defaultSettingsPkg = "com.android.settings";
            String platLogoActivityName = PlatLogoActivity.class.getName();
            String dumpsysActivityCmd = "dumpsys activity " + platLogoActivityName;

            // Retrieve Settings app's package name
            uiAutomation.adoptShellPermissionIdentity(
                    android.Manifest.permission.INTERACT_ACROSS_USERS);
            ResolveInfo info =
                    context.getPackageManager()
                            .resolveActivityAsUser(
                                    new Intent(Settings.ACTION_SETTINGS),
                                    PackageManager.MATCH_SYSTEM_ONLY,
                                    UserHandle.USER_SYSTEM);
            if (info != null && info.activityInfo != null) {
                defaultSettingsPkg = info.activityInfo.packageName;
            }

            // Attempt to launch PlatLogoActivity using Settings app
            Intent intent =
                    Intent.createChooser(
                            new Intent(Settings.ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITY)
                                    .setClassName(
                                            defaultSettingsPkg,
                                            defaultSettingsPkg
                                                    + ".homepage.SettingsHomepageActivity")
                                    .putExtra(
                                            Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI,
                                            new Intent(Intent.ACTION_CHOOSER)
                                                    .toUri(Intent.URI_INTENT_SCHEME))
                                    .putExtra(
                                            Intent.EXTRA_INTENT,
                                            new Intent()
                                                    .setClassName("android", platLogoActivityName))
                                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK),
                            "chooserTitle");
            context.startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

            // Click Settings from ChooserActivity
            String settingsText = "Settings";
            assumeTrue(mUiDevice.wait(Until.hasObject(By.text(settingsText)), timeoutMs));
            mUiDevice.findObject(By.text(settingsText)).click();

            Pattern resumedTruePattern =
                    Pattern.compile(".*mResumed=true.*", Pattern.CASE_INSENSITIVE);

            // Wait for dumpsys result to update
            Poll.forValue(
                () ->
                  resumedTruePattern
                      .matcher(mUiDevice.executeShellCommand(dumpsysActivityCmd))
                      .find())
                      .toBeEqualTo(true)
                      .timeout(Duration.ofMillis(timeoutMs))
                      .await();

            // Fail test if PlatLogoActivity was launched
            assertFalse(
                    "Device is vulnerable to b/250589026, Unexported activities can be launched"
                            + "using ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITY from a workProfile",
                    resumedTruePattern
                            .matcher(mUiDevice.executeShellCommand(dumpsysActivityCmd))
                            .find());
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                uiAutomation.dropShellPermissionIdentity();
                mUiDevice.pressHome();
            } catch (Exception e) {
                // Ignore exceptions as the test has finished
            }
        }
    }
}
