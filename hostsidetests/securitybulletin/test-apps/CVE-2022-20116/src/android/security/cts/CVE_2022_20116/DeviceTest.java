/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20116;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;
import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.telecom.TelecomManager;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private UiDevice mDevice;
    private Context mContext;

    int getIntegerRes(int key) {
        return mContext.getResources().getInteger(key);
    }

    private void startPocService() {
        Intent dialIntent = new Intent(Intent.ACTION_CALL_PRIVILEGED);
        dialIntent.setData(Uri.parse(mContext.getString(R.string.uriData)));
        dialIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        mContext.startService(new Intent(mContext, PocService.class).putExtra(
                mContext.getString(R.string.dialIntentKey),
                PendingIntent.getActivity(mContext, getIntegerRes(R.integer.requestCode),
                        dialIntent,
                        PendingIntent.FLAG_IMMUTABLE | PendingIntent.FLAG_UPDATE_CURRENT)));
    }

    // Wait for UiObject to appear and click on the UiObject if it is visible
    private boolean clickUiObject(BySelector selector) {
        boolean objectFound =
                mDevice.wait(Until.hasObject(selector), getIntegerRes(R.integer.timeoutMs));
        if (objectFound) {
            mDevice.findObject(selector).click();
        }
        return objectFound;
    }

    private String getDefaultDialerPackage() {
        TelecomManager telecomManager = mContext.getSystemService(TelecomManager.class);
        return telecomManager.getSystemDialerPackage();
    }

    @Test
    public void testOngoingCallController() {
        try {
            mDevice = UiDevice.getInstance(getInstrumentation());
            mContext = getInstrumentation().getContext();
            startPocService();
            BySelector selector = By.res(mContext.getString(R.string.callChipResId));
            clickUiObject(selector);
            boolean isVulnerable = mDevice.wait(Until.hasObject(By.pkg(getDefaultDialerPackage())),
                    getIntegerRes(R.integer.timeoutMs));
            SharedPreferences sharedPrefs = mContext.getSharedPreferences(
                    mContext.getString(R.string.sharedPreferences), Context.MODE_APPEND);
            String assumptionFailure =
                    sharedPrefs.getString(mContext.getString(R.string.messageKey), null);
            assumeTrue(assumptionFailure, assumptionFailure == null);
            assertFalse(mContext.getString(R.string.testFailMsg), isVulnerable);
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                mContext.stopService(new Intent(mContext, PocService.class));
            } catch (Exception e) {
                // ignore exceptions here
            }
        }
    }
}
