/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21128_test;

import static android.app.usage.UsageStatsManager.STANDBY_BUCKET_ACTIVE;
import static android.app.usage.UsageStatsManager.STANDBY_BUCKET_EXEMPTED;
import static android.app.usage.UsageStatsManager.STANDBY_BUCKET_NEVER;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;

import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.AmUtils;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.List;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_21128() {
        DevicePolicyManager dpm = null;
        ComponentName componentName = null;
        try {
            Context context = getInstrumentation().getContext();
            dpm = context.getSystemService(DevicePolicyManager.class);
            componentName = new ComponentName(context, PocDeviceAdminReceiver.class);
            final String helperAppPackage = context.getString(R.string.helperAppPackage);

            // Add helperAppPackage to admin protected packages list
            dpm.setUserControlDisabledPackages(
                    componentName,
                    new ArrayList<String>() {
                        {
                            add(helperAppPackage);
                        }
                    });
            List<String> packages = dpm.getUserControlDisabledPackages(componentName);
            assumeTrue(
                    context.getString(R.string.protectedPackageFailMessage),
                    packages.contains(helperAppPackage));
            AmUtils.setStandbyBucket(helperAppPackage, STANDBY_BUCKET_ACTIVE);
            final int firstStandbyBucketValue = AmUtils.getStandbyBucket(helperAppPackage);
            AmUtils.setStandbyBucket(helperAppPackage, STANDBY_BUCKET_NEVER);
            final int secondStandbyBucketValue = AmUtils.getStandbyBucket(helperAppPackage);
            boolean passCondition =
                    (firstStandbyBucketValue == STANDBY_BUCKET_EXEMPTED
                            && secondStandbyBucketValue == STANDBY_BUCKET_EXEMPTED);
            boolean failCondition =
                    (firstStandbyBucketValue == STANDBY_BUCKET_ACTIVE
                            && secondStandbyBucketValue == STANDBY_BUCKET_NEVER);
            assumeTrue(
                    context.getString(R.string.bucketValueChangeFailMessage),
                    passCondition || failCondition);

            // Test fails if the AdminProtected package bucket is not equal STANDBY_BUCKET_EXEMPTED
            assertFalse(context.getString(R.string.testFailMessage), failCondition);
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                // Cleanup: removing the helperAppPackage from admin protected Packages
                dpm.setUserControlDisabledPackages(componentName, new ArrayList<>());
            } catch (Exception ignored) {
                // Ignore all exceptiions
            }
        }
    }
}
