/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21124_test;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.os.Build;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2023_21124() {
        try {
            // Register a broadcast receiver to receive broadcast from 'TargetActivity',
            // 'HelperActivity' and 'HijackActivity'
            Context context = getApplicationContext();
            final CompletableFuture<Integer> taskIdOfTargetActivity = new CompletableFuture<>();
            final Semaphore helperActivityStarted = new Semaphore(0);
            final Semaphore hijackActivityStarted = new Semaphore(0);
            final Semaphore targetActivityStarted = new Semaphore(0);
            BroadcastReceiver broadcastReceiver =
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                if (intent.getBooleanExtra(
                                        context.getString(R.string.isItTargetActivity), false)) {
                                    taskIdOfTargetActivity.complete(
                                            intent.getIntExtra(
                                                    context.getString(
                                                            R.string.taskIdOfTargetActivity),
                                                    -1));
                                    targetActivityStarted.release();
                                }
                                if (intent.getBooleanExtra(
                                        context.getString(R.string.isItHijackActivity), false)) {
                                    hijackActivityStarted.release();
                                }
                                if (intent.getBooleanExtra(
                                        context.getString(R.string.isItHelperActivity), false)) {
                                    helperActivityStarted.release();
                                }
                            } catch (Exception ignore) {
                                // Ignore
                            }
                        }
                    };

            // Fetch and add the flag 'RECEIVER_EXPORTED' for 'TIRAMISU' and above versions to
            // keep the code consistent
            final int requiredFlag =
                    Build.VERSION.SDK_INT >= 33 /* TIRAMISU */
                            ? (int) Context.class.getField("RECEIVER_EXPORTED").get(context)
                            : 0;
            context.registerReceiver(
                    broadcastReceiver,
                    new IntentFilter(context.getString(R.string.broadcastAction)),
                    requiredFlag);

            // Start the 'TargetActivity' as a new task
            final int timeoutMs = 5000;
            String targetActivityPkg = "android.security.cts.CVE_2023_21124_target";
            Intent targetIntent =
                    new Intent(Intent.ACTION_MAIN)
                            .setComponent(
                                    new ComponentName(
                                            targetActivityPkg,
                                            targetActivityPkg + ".TargetActivity"))
                            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(targetIntent);
            assume().withMessage("TargetActivity did not launch")
                    .that(targetActivityStarted.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS))
                    .isTrue();

            // Set 'taskId' of 'TargetActivity' in sharedPreference which gets used in
            // 'TestAccountAuthenticator' to reproduce the vulnerability.
            SharedPreferences sharedPreference =
                    context.getSharedPreferences(
                            context.getString(R.string.sharedPreferences), Context.MODE_PRIVATE);
            sharedPreference
                    .edit()
                    .putInt(
                            context.getString(R.string.taskIdOfTargetActivity),
                            taskIdOfTargetActivity.get(timeoutMs, TimeUnit.MILLISECONDS))
                    .commit();

            // Start the 'HelperActivity' to launch the 'AddAccountSettings' which further launches
            // 'HijackActivity'
            context.startActivity(
                    new Intent(context, HelperActivity.class)
                            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
            assume().withMessage("HelperActivity did not start")
                    .that(helperActivityStarted.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS))
                    .isTrue();
            assume().withMessage("HijackActivity through AddAccountSettings did not launch")
                    .that(hijackActivityStarted.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS))
                    .isTrue();

            // Restart 'TargetActivity' to check for vulnerability
            context.startActivity(targetIntent);

            // Wait for either of the 'HijackActivity' or 'TargetActivity' to launch.
            // Without fix, the 'HijackActivity' starts instead of 'TargetActivity'.
            // With fix, the 'TargetActivity' launches.
            assume().withMessage("Neither 'HijackActivity' nor 'TargetActivity' launched")
                    .that(
                            poll(
                                    () -> {
                                        // If 'HijackActivity' gets launched
                                        if (hijackActivityStarted.tryAcquire()) {
                                            hijackActivityStarted.release();
                                            return true;
                                        }

                                        // If 'TargetActivity' gets launched
                                        return targetActivityStarted.tryAcquire();
                                    }))
                    .isTrue();

            // Without fix, the 'HijackActivity' launches
            assertWithMessage("Device is vulnerable to b/265798353 !!")
                    .that(hijackActivityStarted.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
