/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include "../includes/common.h"
#include "../includes/memutils.h"
#include <media/stagefright/MetaDataBase.h>
#include <pthread.h>

using namespace android;
using namespace std;

char enable_selective_overload = ENABLE_NONE;
const int maxValue = 100000;

void *even_thread(void *metaDataBase) {
  MetaDataBase *metaDataBaseObj = (MetaDataBase *)metaDataBase;
  for (int i = 0; i <= maxValue; i += 2) {
    metaDataBaseObj->setInt32(i, i);
  }
  return nullptr;
}

void *odd_thread(void *metaDataBase) {
  MetaDataBase *metaDataBaseObj = (MetaDataBase *)metaDataBase;
  for (int i = 1; i <= maxValue; i += 2) {
    metaDataBaseObj->setInt32(i, i);
  }
  return nullptr;
}

int main() {
  MetaDataBase metaDataBase = MetaDataBase();
  pthread_t even_thread_id;
  pthread_t odd_thread_id;

  enable_selective_overload = ENABLE_ALL;
  pthread_create(&even_thread_id, nullptr, even_thread, &metaDataBase);
  pthread_create(&odd_thread_id, nullptr, odd_thread, &metaDataBase);

  // Wait for the threads to finish
  pthread_join(even_thread_id, nullptr);
  pthread_join(odd_thread_id, nullptr);
  enable_selective_overload = ENABLE_FREE_CHECK | ENABLE_REALLOC_CHECK;

  return EXIT_SUCCESS;
}
