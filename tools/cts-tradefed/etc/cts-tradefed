#!/bin/bash

# Copyright (C) 2015 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# launcher script for cts-tradefed harness
# can be used from an Android build environment, or a standalone cts zip

UTILS_SCRIPT="$(dirname $(realpath $0))/test-utils-script"

if [ ! -f "${UTILS_SCRIPT}" ]
then
  UTILS_SCRIPT="${ANDROID_BUILD_TOP}/platform_testing/scripts/test-utils-script"
fi

if [ ! -f "${UTILS_SCRIPT}" ]
then
  echo -e "Cannot find test-utils-script in the same location as this script" \
          "and ANDROID_BUILD_TOP is not defined."
  exit 1
fi

source ${UTILS_SCRIPT}

checkPath aapt2
checkPath adb

RDBG_FLAG=$(getRemoteDbgFlag)

# get OS
HOST=`uname`
if [ "$HOST" == "Linux" ]; then
    OS="linux-x86"
elif [ "$HOST" == "Darwin" ]; then
    OS="darwin-x86"
    # Bundled java is for linux so use host JDK on Darwin
    JAVA_BINARY=java
else
    echo "Unrecognized OS"
    exit
fi

if [ -z ${JAVA_BINARY} ]; then
    JAVA_BINARY=${CTS_ROOT}/android-cts/jdk/bin/java
fi;

if [ ! -f "${JAVA_BINARY}" ]; then
    JAVA_BINARY=java
fi

checkPath ${JAVA_BINARY}
checkJavaVersion ${JAVA_BINARY}

# check if in Android build env
if [ ! -z "${ANDROID_BUILD_TOP}" ]; then
    if [ ! -z "${ANDROID_HOST_OUT}" ]; then
      CTS_ROOT=${ANDROID_HOST_OUT}/cts
    else
      CTS_ROOT=${ANDROID_BUILD_TOP}/${OUT_DIR:-out}/host/${OS}/cts
    fi
    if [ ! -d ${CTS_ROOT} ]; then
        echo "Could not find $CTS_ROOT in Android build environment. Try 'make cts'"
        exit
    fi;
fi;

if [ -z ${CTS_ROOT} ]; then
    # assume we're in an extracted cts install
    CTS_ROOT="$(dirname $(realpath $0))/../.."
fi;

JAR_DIR=${CTS_ROOT}/android-cts/tools

for JAR in ${JAR_DIR}/*.jar; do
    JAR_PATH=${JAR_PATH}:${JAR}
done
# Move 'tradefed.jar' to the front of the jar path
TRADEFED_JAR=":${JAR_DIR}/tradefed.jar"
JAR_PATH="${TRADEFED_JAR}${JAR_PATH/$TRADEFED_JAR}"
JAR_PATH=${JAR_PATH:1} # Strip off leading ':'

LIB_DIR=${CTS_ROOT}/android-cts/lib
loadSharedLibraries "$HOST" "$LIB_DIR"

# include any host-side test jars
for j in $(find ${CTS_ROOT}/android-cts/testcases -name '*.jar'); do
    JAR_PATH=${JAR_PATH}:$j
done

${JAVA_BINARY} $RDBG_FLAG -Xmx16g -XX:+HeapDumpOnOutOfMemoryError -cp ${JAR_PATH} -DCTS_ROOT=${CTS_ROOT} com.android.compatibility.common.tradefed.command.CompatibilityConsole "$@"

